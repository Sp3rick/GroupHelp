{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LibreGroupHelp","text":"<p>Open-Source re-creation of telegram group manager Group Help in NodeJS based on node-telegram-api.</p> <p>An official instance of bot is running on @LibreGroupHelpBot</p>"},{"location":"#installation","title":"Installation:","text":"<p>Be sure to have installed a recent version of NodeJS</p> <p>Verify NodeJS installation with <code>node -v</code></p> <p>Set your bot token using configuration file, look at config documentation.</p> <p>Open a terminal inside LibreGroupHelp folder and run this commands</p> <pre><code>npm install\n</code></pre> <p>Now you should be ready to run LibreGroupHelp using: <pre><code>node index.js\n</code></pre></p>"},{"location":"#what-is-done","title":"What is done","text":"<p>\u2705 Completed and working</p> <p>\ud83d\udfe1 Not fully implemented (work in progress)</p> <p>\u274c Not implemented at all</p> <pre><code>\u2705 Roles and permissions hirarchy\n\u274c Custom roles\n\u2705 Moderation commands\n\u274c Support moderation for channels users\n\u274c Support for anonymous admins\n\ud83d\udfe1 Bot support\n\u274c Bot help (how to use)\n\u274c Bot clones support\n\u274c UTC Time settings\n\u2705 Langs and lang settings\n\u2705 Rules\n\u2705 Welcome\n\u2705 Anti-flood\n\u2705 Anti-spam\n\u2705 Goodbye\n\u2705 Alphabets\n\u2705 Captcha (1 mode)\n\u274c Checks settings\n\u274c @Admin\n\u274c Blocks settings\n\u2705 Media blocks\n\u274c Anti-NSFW\n\u2705 Warns settings\n\u274c Nigth mode\n\u274c Tag settings\n\u2705 Link settings\n\u274c Approve mode\n\u274c Message Deletion settings\n\u274c Topics settings\n\u274c Banned words\n\u274c Recurring messages\n\u274c Members management\n\u274c Masked users settings\n\u274c Discussion group settings\n\u274c Personal commands\n\u274c Magic Strickers/GIFs\n\u274c Max message length settings\n\u274c Log channel\n\u274c Staff group\n\u274c Group statistics\n\u2705 General commands permissions editor\n\u2705 Remove user-data from group (/forget)\n\u274c Remove user-data from bot\n\u274c User privacy mode\n\u2705 Crypto prices external api\n</code></pre>"},{"location":"#updating","title":"Updating","text":"<p>To update LibreGroupHelp you need to backup ./database folder and ./config.json, then repeat installation process and paste there again both file and folder, you may need to add some config.json parameters manually if has been added</p>"},{"location":"#contribute","title":"Contribute","text":"<p>Documentation is the section you are looking for if you want to contribute to LibreGroupHelp</p>"},{"location":"#ask-a-question","title":"Ask a question","text":"<p>If you have any questions about LibreGroupHelp, feel free to open an issue or ask directly in our telegram group @LGHChat.</p>"},{"location":"documentation/","title":"GHBot documentation","text":""},{"location":"documentation/#how-it-works","title":"How it works","text":"<p>Begin point is from <code>index.js</code> which loads plugins, database and the acutal bot is then started by main.js</p> <p>Other than starting the bot <code>main.js</code> emits on GHBot some events with many LibreGroupHelp related integrated data ready to use, simplyfing the code</p> <p>Database is managed by <code>database.js</code>, usually on the <code>db</code> variable, main methods are found on db.chats and db.users to manage data about them</p> <p>JSDocs Objects documentation are on <code>GHbot.js</code>, it may also implement small fixes always to make an easyer interface</p> <p>TGbot variable will give you direct access to the telegram-bot-api, when possible you should use GHbot events and methods and if does not exhist the one needed create that     Additionally on TGbot.me is avaiable <code>await TGbot.getMe()</code> result</p> <p>Any LibreGroupHelp code should keep in mind that user should be able to delete his data in any moment, that's for respecting at best our privacy philosophy</p> <p>Github good first issues</p>"},{"location":"documentation/GHBot/","title":"Objects","text":""},{"location":"documentation/GHBot/#telegrambot-api","title":"TelegramBot api","text":"<p>You can finnd documentation about TelegramBot Objects on telegram-bot-api github</p> <p>The down below lines are generated with jsdoc2md</p>"},{"location":"documentation/GHBot/#classes","title":"Classes","text":"LGHInterface"},{"location":"documentation/GHBot/#functions","title":"Functions","text":"testObject() \u21d2 <code>LGHChat</code>"},{"location":"documentation/GHBot/#typedefs","title":"Typedefs","text":"AnonTGUser : <code>Object</code> <p>Basic anonymized user object</p> Punishment : <code>0</code> | <code>1</code> | <code>2</code> | <code>3</code> | <code>4</code> <p>Punishment to apply</p> <ul> <li>0: off</li> <li>1: warn</li> <li>2: kick</li> <li>3: mute</li> <li>4: ban</li> </ul> LGHPunish : <code>Object</code> <p>antispam.js settings Object.</p> LGHChatBasedPunish : <code>Object</code> <p>Object to reresent different punish settings for more chat types</p> LGHAlphabetBasedPunish : <code>Object</code> <p>Object to reresent different punish settings for messages containing various Alphabets</p> TargetUser : <code>Object</code> <p>Object that refers to a target user</p> LGHPerms : <code>Object</code> <p>LGHPerms Object.</p> simpleMedia : <code>Object</code> customMessage : <code>Object</code> <p>object of MessageMaker</p> LGHAdminAdds : <code>object</code> LGHAdmin : <code>TelegramBot.ChatAdministratorRights</code> | <code>LGHAdminAdds</code> LGHAdminList : <code>Array.&lt;LGHAdmin&gt;</code> userStatus : <code>Object</code> <p>object with data about an user in a group</p> LGHRole : <code>Object</code> <p>if pre-made role (string key) only users object should be used</p> LGHWarns : <code>Object</code> <p>warns.js plugin related data</p> LGHWelcome : <code>Object</code> <p>welcome.js settings Object.</p> LGHFloodAdds : <code>Object</code> <p>antiflood.js settings additional Object elements.</p> LGHFlood : <code>LGHFloodAdds</code> | <code>LGHPunish</code> <p>antiflood.js settings Object.</p> LGHSpamTgLinksAdds : <code>Object</code> <p>antispam.js settings Object additional items.</p> LGHSpamTgLinks : <code>LGHSpamTgLinksAdds</code> | <code>LGHPunish</code> <p>antispam.js settings about Telegram Links Object.</p> LGHSpamLinksAdds : <code>Object</code> <p>antispam.js spam links Object additional items.</p> LGHSpamLinks : <code>LGHSpamLinksAdds</code> | <code>LGHPunish</code> <p>antispam.js settings about Links Object.</p> LGHSpamForward : <code>LGHChatBasedPunish</code> <p>antispam.js settings about foward.</p> LGHSpamQuote : <code>LGHChatBasedPunish</code> <p>antispam.js settings about quote.</p> LGHSpam : <code>Object</code> <p>antispam.js settings Object.</p> LGHGoodbye : <code>Object</code> <p>goodbye.js settings</p> LGHCaptcha : <code>Object</code> <p>captcha.js settings</p> LGHMedia : <code>Object</code> <p>media.js settings, if LGHPunish is disabled the object will be deleted (undefinied)</p> CustomChat : <code>Object</code> <p>Additional chat elements for chat object by LibreGroupHelp</p> LGHChat : <code>TelegramBot.Chat</code> | <code>CustomChat</code> <p>Full LGH chat object given by LGHBot events, custom items avaiable if working about a group</p> CustomUser : <code>Object</code> LGHUser : <code>TelegramBot.User</code> | <code>CustomUser</code> <p>Custom chat object given by LGHBot events, custom items avaiable if working about a group</p> ParsedCommand : <code>Object</code> <p>ParsedCommand Object.</p> CustomCommand : <code>Object</code> <p>Additional items to command for LGH</p> CustomMessage : <code>Object</code> LGHMessage : <code>TelegramBot.Message</code> | <code>CustomMessage</code> <p>Custom chat object given by LGHBot events, custom items avaiable if working about a group</p> CustomCallback : <code>Object</code> LGHCallback : <code>TelegramBot.CallbackQuery</code> | <code>CustomCallback</code> <p>Custom callback object given by LGHBot events, custom items may be avaiable</p> chatsDatabase : <code>Object</code> <p>Object containing chat-related database functions.</p> usersDatabase : <code>Object</code> <p>Object containing user-related database functions.</p> LGHDatabase : <code>Object</code> <p>Type returned by the getDatabase function.</p> LibreGHelp : <code>Object</code> <p></p>"},{"location":"documentation/GHBot/#lghinterface","title":"LGHInterface","text":"<p>Kind: global class  </p> <ul> <li>LGHInterface<ul> <li>new LGHInterface(LibreGHelp)</li> <li>.GHbot : <code>LGHInterface</code></li> <li>.TGbot : <code>TelegramBot</code></li> <li>.db : <code>LGHDatabase</code></li> <li>.config : <code>Object</code></li> <li>.onMessage(handler)</li> <li>.onEditedMessage(handler)</li> <li>.onEditedMessageText(handler)</li> <li>.onCallback(handler)</li> <li>.sendMessage(userId, chatId, text, options) \u21d2 <code>Boolean</code> | <code>Promise.&lt;TelegramBot.Message&gt;</code></li> <li>.sendPhoto(userId, chatId, photo, options, fileOptions) \u21d2 <code>Boolean</code> | <code>Promise.&lt;TelegramBot.Message&gt;</code></li> <li>.editMessageMedia(userId, media, options) \u21d2 <code>Boolean</code> | <code>Promise.&lt;TelegramBot.Message&gt;</code></li> <li>.editMessageText(userId, text, options) \u21d2 <code>Promise.&lt;Boolean&gt;</code></li> <li>.answerCallbackQuery(userId, callbackId, options) \u21d2 <code>Promise.&lt;Boolean&gt;</code></li> <li>.banChatMember(userId, chatId, targetId, options) \u21d2 <code>Promise.&lt;Boolean&gt;</code></li> <li>.unbanChatMember(userId, chatId, targetId, options) \u21d2 <code>Promise.&lt;Boolean&gt;</code></li> <li>.restrictChatMember(userId, chatId, targetId, options) \u21d2 <code>Promise.&lt;Boolean&gt;</code></li> </ul> </li> </ul> <p></p>"},{"location":"documentation/GHBot/#new-lghinterfacelibreghelp","title":"new LGHInterface(LibreGHelp)","text":"Param Type Description LibreGHelp <code>LibreGHelp</code> Libre Group Help telegram bot handler"},{"location":"documentation/GHBot/#lghinterfaceghbot-lghinterface","title":"lghInterface.GHbot : <code>LGHInterface</code>","text":"<p>Kind: instance property of <code>LGHInterface</code> </p>"},{"location":"documentation/GHBot/#lghinterfacetgbot-telegrambot","title":"lghInterface.TGbot : <code>TelegramBot</code>","text":"<p>Kind: instance property of <code>LGHInterface</code> </p>"},{"location":"documentation/GHBot/#lghinterfacedb-lghdatabase","title":"lghInterface.db : <code>LGHDatabase</code>","text":"<p>Kind: instance property of <code>LGHInterface</code> </p>"},{"location":"documentation/GHBot/#lghinterfaceconfig-object","title":"lghInterface.config : <code>Object</code>","text":"<p>Kind: instance property of <code>LGHInterface</code> </p>"},{"location":"documentation/GHBot/#lghinterfaceonmessagehandler","title":"lghInterface.onMessage(handler)","text":"<p>LGHbot message event handler</p> <p>Kind: instance method of <code>LGHInterface</code> </p> Param Type Description handler <code>function</code> handler function <p></p>"},{"location":"documentation/GHBot/#lghinterfaceoneditedmessagehandler","title":"lghInterface.onEditedMessage(handler)","text":"<p>LGHbot edited_message event handler</p> <p>Kind: instance method of <code>LGHInterface</code> </p> Param Type Description handler <code>function</code> handler function <p></p>"},{"location":"documentation/GHBot/#lghinterfaceoneditedmessagetexthandler","title":"lghInterface.onEditedMessageText(handler)","text":"<p>LGHbot edited_message event handler</p> <p>Kind: instance method of <code>LGHInterface</code> </p> Param Type Description handler <code>function</code> handler function <p></p>"},{"location":"documentation/GHBot/#lghinterfaceoncallbackhandler","title":"lghInterface.onCallback(handler)","text":"<p>LGHbot callback_query event handler</p> <p>Kind: instance method of <code>LGHInterface</code> </p> Param Type Description handler <code>function</code> handler function <p></p>"},{"location":"documentation/GHBot/#lghinterfacesendmessageuserid-chatid-text-options-boolean-promisetelegrambotmessage","title":"lghInterface.sendMessage(userId, chatId, text, options) \u21d2 <code>Boolean</code> | <code>Promise.&lt;TelegramBot.Message&gt;</code>","text":"<p>LGHbot safely send message under user request limit</p> <p>Kind: instance method of <code>LGHInterface</code> Returns: <code>Boolean</code> | <code>Promise.&lt;TelegramBot.Message&gt;</code> - - returns true on success, false if request has been dropped out  </p> Param Type Description userId <code>number</code> | <code>string</code> id of user that's the cause of your request chatId <code>number</code> | <code>string</code> chat where message should be sent text <code>String</code> text of message options <code>TelegramBot.SendMessageOptions</code> additional telegram options <p></p>"},{"location":"documentation/GHBot/#lghinterfacesendphotouserid-chatid-photo-options-fileoptions-boolean-promisetelegrambotmessage","title":"lghInterface.sendPhoto(userId, chatId, photo, options, fileOptions) \u21d2 <code>Boolean</code> | <code>Promise.&lt;TelegramBot.Message&gt;</code>","text":"<p>LGHbot safely send message under user request limit</p> <p>Kind: instance method of <code>LGHInterface</code> Returns: <code>Boolean</code> | <code>Promise.&lt;TelegramBot.Message&gt;</code> - - returns true on success, false if request has been dropped out  </p> Param Type Description userId chatId <code>number</code> | <code>string</code> chat where message should be sent photo <code>TelegramBot.InputMediaPhoto</code> photo options <code>TelegramBot.SendPhotoOptions</code> additional telegram options fileOptions <code>TelegramBot.FileOptions</code> file metadata <p></p>"},{"location":"documentation/GHBot/#lghinterfaceeditmessagemediauserid-media-options-boolean-promisetelegrambotmessage","title":"lghInterface.editMessageMedia(userId, media, options) \u21d2 <code>Boolean</code> | <code>Promise.&lt;TelegramBot.Message&gt;</code>","text":"<p>Kind: instance method of <code>LGHInterface</code> Returns: <code>Boolean</code> | <code>Promise.&lt;TelegramBot.Message&gt;</code> - - returns true on success, false if request has been dropped out  </p> Param Type Description userId <code>number</code> | <code>string</code> id of user that's the cause of your request media <code>TelegramBot.InputMedia</code> input media options <code>TelegramBot.EditMessageMediaOptions</code> <p></p>"},{"location":"documentation/GHBot/#lghinterfaceeditmessagetextuserid-text-options-promiseboolean","title":"lghInterface.editMessageText(userId, text, options) \u21d2 <code>Promise.&lt;Boolean&gt;</code>","text":"<p>LGHbot safely edit message under user request limit</p> <p>Kind: instance method of <code>LGHInterface</code> Returns: <code>Promise.&lt;Boolean&gt;</code> - - returns true on success, false if request has been dropped out  </p> Param Type Description userId <code>number</code> | <code>string</code> id of user that's the cause of your request text <code>String</code> text of message options <code>TelegramBot.EditMessageTextOptions</code> additional telegram options <p></p>"},{"location":"documentation/GHBot/#lghinterfaceanswercallbackqueryuserid-callbackid-options-promiseboolean","title":"lghInterface.answerCallbackQuery(userId, callbackId, options) \u21d2 <code>Promise.&lt;Boolean&gt;</code>","text":"<p>LGHbot safely answerCallbackQuert under user request limit</p> <p>Kind: instance method of <code>LGHInterface</code> Returns: <code>Promise.&lt;Boolean&gt;</code> - - returns true on success, false if request has been dropped out  </p> Param Type Description userId <code>number</code> | <code>string</code> id of user that's the cause of your request callbackId <code>number</code> | <code>string</code> id of user that's the cause of your request options <code>TelegramBot.AnswerCallbackQueryOptions</code> additional telegram options <p></p>"},{"location":"documentation/GHBot/#lghinterfacebanchatmemberuserid-chatid-targetid-options-promiseboolean","title":"lghInterface.banChatMember(userId, chatId, targetId, options) \u21d2 <code>Promise.&lt;Boolean&gt;</code>","text":"<p>LGHbot safely answerCallbackQuert under user request limit</p> <p>Kind: instance method of <code>LGHInterface</code> Returns: <code>Promise.&lt;Boolean&gt;</code> - - returns true on success, false if request has been dropped out  </p> Param Type Description userId <code>number</code> | <code>string</code> id of user that's the cause of your request chatId <code>number</code> | <code>string</code> - chat where message should be sent targetId <code>number</code> | <code>string</code> id of user that should be banned options <code>TelegramBot.BanOptions</code> additional telegram options <p></p>"},{"location":"documentation/GHBot/#lghinterfaceunbanchatmemberuserid-chatid-targetid-options-promiseboolean","title":"lghInterface.unbanChatMember(userId, chatId, targetId, options) \u21d2 <code>Promise.&lt;Boolean&gt;</code>","text":"<p>LGHbot safely answerCallbackQuert under user request limit</p> <p>Kind: instance method of <code>LGHInterface</code> Returns: <code>Promise.&lt;Boolean&gt;</code> - - returns true on success, false if request has been dropped out  </p> Param Type Description userId <code>number</code> | <code>string</code> id of user that's the cause of your request chatId <code>number</code> | <code>string</code> - chat where message should be sent targetId <code>number</code> | <code>string</code> id of user that should be unbanned options <code>TelegramBot.UnbanOptions</code> additional telegram options <p></p>"},{"location":"documentation/GHBot/#lghinterfacerestrictchatmemberuserid-chatid-targetid-options-promiseboolean","title":"lghInterface.restrictChatMember(userId, chatId, targetId, options) \u21d2 <code>Promise.&lt;Boolean&gt;</code>","text":"<p>LGHbot safely answerCallbackQuert under user request limit</p> <p>Kind: instance method of <code>LGHInterface</code> Returns: <code>Promise.&lt;Boolean&gt;</code> - - returns true on success, false if request has been dropped out  </p> Param Type Description userId <code>number</code> | <code>string</code> id of user that's the cause of your request chatId <code>number</code> | <code>string</code> - chat where message should be sent targetId <code>number</code> | <code>string</code> id of user to restrict options <code>TelegramBot.RestrictChatMemberOptions</code> additional telegram options <p></p>"},{"location":"documentation/GHBot/#permissionstatus-enum","title":"PermissionStatus : <code>enum</code>","text":"<p>Permission status - 1: allowed - 0: neutral - -1: denied</p> <p>Kind: global enum Properties</p> Name Type Default ALLOWED <code>number</code> <code>1</code> NEUTRAL <code>number</code> <code>0</code> DENIED <code>number</code> <code>-1</code> <p></p>"},{"location":"documentation/GHBot/#testobject-lghchat","title":"testObject() \u21d2 <code>LGHChat</code>","text":"<p>Kind: global function Returns: <code>LGHChat</code> - testing jsdoc advices </p>"},{"location":"documentation/GHBot/#anontguser-object","title":"AnonTGUser : <code>Object</code>","text":"<p>Basic anonymized user object</p> <p>Kind: global typedef Properties</p> Name Type Description id <code>String</code> | <code>Number</code> userId <p></p>"},{"location":"documentation/GHBot/#punishment-0-1-2-3-4","title":"Punishment : <code>0</code> | <code>1</code> | <code>2</code> | <code>3</code> | <code>4</code>","text":"<p>Punishment to apply - 0: off - 1: warn - 2: kick - 3: mute - 4: ban</p> <p>Kind: global typedef </p>"},{"location":"documentation/GHBot/#lghpunish-object","title":"LGHPunish : <code>Object</code>","text":"<p>antispam.js settings Object.</p> <p>Kind: global typedef Properties</p> Name Type Description punishment <code>Punishment</code> Punishment to apply [0:off/1:warn/2:kick/3:mute/4:ban]. PTime <code>Number</code> | <code>null</code> Available if punishment is set to warn/mute/ban, contains seconds of punishment. delete <code>boolean</code> | <code>null</code> True if deletion is enabled as side effect. <p></p>"},{"location":"documentation/GHBot/#lghchatbasedpunish-object","title":"LGHChatBasedPunish : <code>Object</code>","text":"<p>Object to reresent different punish settings for more chat types</p> <p>Kind: global typedef Properties</p> Name Type Description channels <code>LGHPunish</code> Punish to apply for channels. groups <code>LGHPunish</code> Punish to apply for groups. users <code>LGHPunish</code> Punish to apply for users. bots <code>LGHPunish</code> Punish to apply for bots. <p></p>"},{"location":"documentation/GHBot/#lghalphabetbasedpunish-object","title":"LGHAlphabetBasedPunish : <code>Object</code>","text":"<p>Object to reresent different punish settings for messages containing various Alphabets</p> <p>Kind: global typedef Properties</p> Name Type Description arabic <code>LGHPunish</code> Punish to apply for messages containing arabic characters. cyrillic <code>LGHPunish</code> Punish to apply for messages containing cyrillic (russian) characters. chinese <code>LGHPunish</code> Punish to apply for messages containing chinese characters. latin <code>LGHPunish</code> Punish to apply for messages containing latin characters. <p></p>"},{"location":"documentation/GHBot/#targetuser-object","title":"TargetUser : <code>Object</code>","text":"<p>Object that refers to a target user</p> <p>Kind: global typedef Properties</p> Name Type Description id <code>string</code> | <code>number</code> Telegram user Id name <code>string</code> Full LGH name identifier: \"fullName [id]\" perms <code>LGHPerms</code> LGHPerms with perms of target user <code>TelegramBot.User</code> | <code>null</code> If avaiable, target basic user object <p></p>"},{"location":"documentation/GHBot/#lghperms-object","title":"LGHPerms : <code>Object</code>","text":"<p>LGHPerms Object.</p> <p>Kind: global typedef Properties</p> Name Type Description commands <code>Array.&lt;string&gt;</code> Array of commands, if starts with \"COMMAND_\" means its to be translated, otherwise is the literal command. immune <code>PermissionStatus</code> Active if this user can't receive any punishment (kick/warn/mute/ban) [1/0/-1]. flood <code>PermissionStatus</code> Permission to flood messages [1/0/-1]. link <code>PermissionStatus</code> Permission to send links [1/0/-1]. tgLink <code>PermissionStatus</code> Permission to send telegram links/usernames [1/0/-1]. forward <code>PermissionStatus</code> Permission to forward messages from anywhere [1/0/-1]. quote <code>PermissionStatus</code> Permission to quote from anywhere [1/0/-1]. porn <code>PermissionStatus</code> Bypass porn/gore checks [1/0/-1]. night <code>PermissionStatus</code> Bypass any night mode limitation [1/0/-1]. media <code>PermissionStatus</code> Bypass any media limitation [1/0/-1]. alphabets <code>PermissionStatus</code> Bypass any alphabets characters limitations [1/0/-1]. words <code>PermissionStatus</code> Bypass banned words limitations [1/0/-1]. length <code>PermissionStatus</code> Bypass message length limitations [1/0/-1]. roles <code>PermissionStatus</code> Permission to change roles of lower level users [1/0/-1]. settings <code>PermissionStatus</code> Permission to change bot group settings [1/0/-1]. <p></p>"},{"location":"documentation/GHBot/#simplemedia-object","title":"simpleMedia : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description type <code>String</code> | <code>null</code> Type of media (audio, photo, video, video_note, animation, sticker, document) or false fileId <code>String</code> media fileId or false options <code>Object</code> additional options for TelegramBot <p></p>"},{"location":"documentation/GHBot/#custommessage-object","title":"customMessage : <code>Object</code>","text":"<p>object of MessageMaker</p> <p>Kind: global typedef Properties</p> Name Type Description text <code>String</code> Text of messsage entities <code>Array.&lt;TelegramBot.MessageEntity&gt;</code> Telegram entities of text roles <code>Array.&lt;String&gt;</code> array user roles, string for pre-made roles, number for custom roles (user-made) format <code>Boolean</code> true if message should be formatted (enabled by default), mean that entities should be passed on sendMessage function media <code>simpleMedia</code> user administrator title buttons <code>String</code> can be transformed in inline_keyboard with parseTextToInlineKeyboard() buttonsParsed <code>Array.&lt;TelegramBot.KeyboardButton&gt;</code> already parsed buttons ready to use for inline_keyboard <p></p>"},{"location":"documentation/GHBot/#lghadminadds-object","title":"LGHAdminAdds : <code>object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description user <code>AnonTGUser</code> Basic anonymized user object status <code>TelegramBot.ChatMemberStatus</code> <p></p>"},{"location":"documentation/GHBot/#lghadmin-telegrambotchatadministratorrights-lghadminadds","title":"LGHAdmin : <code>TelegramBot.ChatAdministratorRights</code> | <code>LGHAdminAdds</code>","text":"<p>Kind: global typedef </p>"},{"location":"documentation/GHBot/#lghadminlist-arraylghadmin","title":"LGHAdminList : <code>Array.&lt;LGHAdmin&gt;</code>","text":"<p>Kind: global typedef </p>"},{"location":"documentation/GHBot/#userstatus-object","title":"userStatus : <code>Object</code>","text":"<p>object with data about an user in a group</p> <p>Kind: global typedef Properties</p> Name Type Description firtJoin <code>Number</code> Unix number of first user join time in seconds, false if unknown (managed by welcome.js) perms <code>LGHPerms</code> LGHPerms object for all user-specific permissions adminPerms <code>LGHPerms</code> LGHPerms object for user permissions if admin roles <code>Array.&lt;String&gt;</code> array user roles, string for pre-made roles, number for custom roles (user-made) title <code>String</code> | <code>undefined</code> user administrator title waitingReply <code>String</code> | <code>null</code> string with callback data hirarchy if bot is expecting a message from user on group <p></p>"},{"location":"documentation/GHBot/#lghrole-object","title":"LGHRole : <code>Object</code>","text":"<p>if pre-made role (string key) only users object should be used</p> <p>Kind: global typedef Properties</p> Name Type Description name <code>String</code> | <code>null</code> role name emoji <code>String</code> | <code>null</code> emoji for the role level <code>Number</code> | <code>null</code> role level, higher level users can use commands that affect  lower level users perms <code>LGHPerms</code> | <code>null</code> LGHPerms object applyed at lowest priority on any user in this role users <code>Array.&lt;String&gt;</code> array of userId in this role <p></p>"},{"location":"documentation/GHBot/#lghwarns-object","title":"LGHWarns : <code>Object</code>","text":"<p>warns.js plugin related data</p> <p>Kind: global typedef Properties</p> Name Type Description timed <code>Object.&lt;string, Number&gt;</code> ([userId]: [endTime, endTime, endTime]) contains necerray data to revoke scheduled warns when  time is over count <code>Object.&lt;string, Number&gt;</code> ([userId]: number) countains count of warns for each user limit <code>Number</code> number of warns after wich should be applyed a punishment punishment <code>2</code> | <code>3</code> | <code>4</code> punishment when limit is hit [2:kick/3:mute/4:ban] PTime <code>Number</code> | <code>null</code> avaiable if punishment is set to warn/mute/ban, contains seconds of punishment <p></p>"},{"location":"documentation/GHBot/#lghwelcome-object","title":"LGHWelcome : <code>Object</code>","text":"<p>welcome.js settings Object.</p> <p>Kind: global typedef Properties</p> Name Type Description state <code>boolean</code> True if welcome is enabled (default false). once <code>boolean</code> True if should be sent only at first user join (default false). clean <code>boolean</code> True if last welcome message on the group should be (default false). joinList <code>Array.&lt;(string|number)&gt;</code> cronology of users that joined the group over time. lastWelcomeId <code>string</code> | <code>number</code> | <code>boolean</code> MessageId of last welcome message sent, useful if clean is enabled, false if never sent one before. message <code>customMessage</code> CustomMessage object. <p></p>"},{"location":"documentation/GHBot/#lghfloodadds-object","title":"LGHFloodAdds : <code>Object</code>","text":"<p>antiflood.js settings additional Object elements.</p> <p>Kind: global typedef Properties</p> Name Type Description messages <code>Number</code> Number of messages needed to trigger the Antiflood. time <code>Number</code> Seconds within the specified message should be sent to trigger the Antiflood. <p></p>"},{"location":"documentation/GHBot/#lghflood-lghfloodadds-lghpunish","title":"LGHFlood : <code>LGHFloodAdds</code> | <code>LGHPunish</code>","text":"<p>antiflood.js settings Object.</p> <p>Kind: global typedef </p>"},{"location":"documentation/GHBot/#lghspamtglinksadds-object","title":"LGHSpamTgLinksAdds : <code>Object</code>","text":"<p>antispam.js settings Object additional items.</p> <p>Kind: global typedef Properties</p> Name Type Description usernames <code>Boolean</code> True if usernames should be considered as spam. bots <code>Boolean</code> True if bots should be considered as spam. exceptions <code>Array.&lt;String&gt;</code> Array of Telegram exceptions, may contain \"Name:Id\", <code>Name:|hidden</code> (for hidden users), or t.me link, or @username, \"Name\" <p></p>"},{"location":"documentation/GHBot/#lghspamtglinks-lghspamtglinksadds-lghpunish","title":"LGHSpamTgLinks : <code>LGHSpamTgLinksAdds</code> | <code>LGHPunish</code>","text":"<p>antispam.js settings about Telegram Links Object.</p> <p>Kind: global typedef </p>"},{"location":"documentation/GHBot/#lghspamlinksadds-object","title":"LGHSpamLinksAdds : <code>Object</code>","text":"<p>antispam.js spam links Object additional items.</p> <p>Kind: global typedef Properties</p> Name Type Description exceptions <code>Array.&lt;String&gt;</code> Array of strings of allowed links or hostnames. <p></p>"},{"location":"documentation/GHBot/#lghspamlinks-lghspamlinksadds-lghpunish","title":"LGHSpamLinks : <code>LGHSpamLinksAdds</code> | <code>LGHPunish</code>","text":"<p>antispam.js settings about Links Object.</p> <p>Kind: global typedef </p>"},{"location":"documentation/GHBot/#lghspamforward-lghchatbasedpunish","title":"LGHSpamForward : <code>LGHChatBasedPunish</code>","text":"<p>antispam.js settings about foward.</p> <p>Kind: global typedef </p>"},{"location":"documentation/GHBot/#lghspamquote-lghchatbasedpunish","title":"LGHSpamQuote : <code>LGHChatBasedPunish</code>","text":"<p>antispam.js settings about quote.</p> <p>Kind: global typedef </p>"},{"location":"documentation/GHBot/#lghspam-object","title":"LGHSpam : <code>Object</code>","text":"<p>antispam.js settings Object.</p> <p>Kind: global typedef Properties</p> Name Type Description tgLinks <code>LGHSpamTgLinks</code> rules and exceptions for telegram links considered as spam links <code>LGHSpamLinks</code> rules and exceptions for all links considered as spam forward <code>LGHSpamForward</code> rules and exceptions for all forwarded messages considered as spam quote <code>LGHSpamQuote</code> rules and exceptions for all quoted messages considered as spam <p></p>"},{"location":"documentation/GHBot/#lghgoodbye-object","title":"LGHGoodbye : <code>Object</code>","text":"<p>goodbye.js settings</p> <p>Kind: global typedef Properties</p> Name Type Description group <code>Boolean</code> True if goodbye should be sent on group clear <code>Boolean</code> True if last goodbye message should be deleted before sending a new one lastId <code>TelegramBot.MessageId</code> messageId of last goodbye message sent on group gMsg <code>CustomMessage</code> Goodbye message to send on group private <code>Boolean</code> True if goodbye should be sent on private chat pMsg <code>CustomMessage</code> Goodbye message to send on private chat <p></p>"},{"location":"documentation/GHBot/#lghcaptcha-object","title":"LGHCaptcha : <code>Object</code>","text":"<p>captcha.js settings</p> <p>Kind: global typedef Properties</p> Name Type Description state <code>Boolean</code> True if welcome is enabled (default false). mode <code>string</code> Type of captcha, can be \"image\" (default \"image\"). time <code>Number</code> Time limit to solve the captcha once <code>boolean</code> True if should be sent only at first user join (from welcome.js) (default false). fails <code>boolean</code> True if captcha should notify on group that someone failed the captcha (default false). punishment <code>Punishment</code> Punishment to apply [1:warn/2:kick/3:mute/4:ban]. PTime <code>Number</code> Available if punishment is set to warn/mute/ban, contains seconds of punishment. <p></p>"},{"location":"documentation/GHBot/#lghmedia-object","title":"LGHMedia : <code>Object</code>","text":"<p>media.js settings, if LGHPunish is disabled the object will be deleted (undefinied)</p> <p>Kind: global typedef Properties</p> Name Type photo <code>LGHPunish</code> | <code>undefined</code> video <code>LGHPunish</code> | <code>undefined</code> album <code>LGHPunish</code> | <code>undefined</code> gif <code>LGHPunish</code> | <code>undefined</code> voice <code>LGHPunish</code> | <code>undefined</code> audio <code>LGHPunish</code> | <code>undefined</code> sticker <code>LGHPunish</code> | <code>undefined</code> sticker_video <code>LGHPunish</code> | <code>undefined</code> dice <code>LGHPunish</code> | <code>undefined</code> emoji_video <code>LGHPunish</code> | <code>undefined</code> emoji_premium <code>LGHPunish</code> | <code>undefined</code> video_note <code>LGHPunish</code> | <code>undefined</code> file <code>LGHPunish</code> | <code>undefined</code> game <code>LGHPunish</code> | <code>undefined</code> contact <code>LGHPunish</code> | <code>undefined</code> poll <code>LGHPunish</code> | <code>undefined</code> location <code>LGHPunish</code> | <code>undefined</code> capital <code>LGHPunish</code> | <code>undefined</code> payment <code>LGHPunish</code> | <code>undefined</code> via_bot <code>LGHPunish</code> | <code>undefined</code> story <code>LGHPunish</code> | <code>undefined</code> spoiler <code>LGHPunish</code> | <code>undefined</code> spoiler_media <code>LGHPunish</code> | <code>undefined</code> giveaway <code>LGHPunish</code> | <code>undefined</code> mention <code>LGHPunish</code> | <code>undefined</code> text_mention <code>LGHPunish</code> | <code>undefined</code> hashtag <code>LGHPunish</code> | <code>undefined</code> cashtag <code>LGHPunish</code> | <code>undefined</code> command <code>LGHPunish</code> | <code>undefined</code> url <code>LGHPunish</code> | <code>undefined</code> email <code>LGHPunish</code> | <code>undefined</code> number <code>LGHPunish</code> | <code>undefined</code> bold <code>LGHPunish</code> | <code>undefined</code> italic <code>LGHPunish</code> | <code>undefined</code> underline <code>LGHPunish</code> | <code>undefined</code> striketrough <code>LGHPunish</code> | <code>undefined</code> quoteblock <code>LGHPunish</code> | <code>undefined</code> closed_blockquote <code>LGHPunish</code> | <code>undefined</code> code <code>LGHPunish</code> | <code>undefined</code> pre_code <code>LGHPunish</code> | <code>undefined</code> textlink <code>LGHPunish</code> | <code>undefined</code> scheduled <code>LGHPunish</code> | <code>undefined</code> effect <code>LGHPunish</code> | <code>undefined</code> <p></p>"},{"location":"documentation/GHBot/#customchat-object","title":"CustomChat : <code>Object</code>","text":"<p>Additional chat elements for chat object by LibreGroupHelp</p> <p>Kind: global typedef Properties</p> Name Type Description admins <code>LGHAdminList</code> | <code>null</code> array with known admins objects (user data anonymized) lang <code>String</code> | <code>null</code> current chat lang currency <code>String</code> | <code>null</code> currency of chat, default to USD link <code>string</code> | <code>null</code> group access link isGroup <code>Boolean</code> temporary item, result of <code>(chat.type == \"supergroup\" || chat.type == \"group\")</code> users <code>Object.&lt;string, userStatus&gt;</code> | <code>null</code> Object-IdName based data about every user in the group (ex. users[643547] access data of userId 643547) roles <code>Object.&lt;string, LGHRole&gt;</code> | <code>null</code> data about a specific role, full role Object if it's a custom role (key with a number) basePerms <code>LGHPerms</code> base permissions applyed to every user adminPerms <code>LGHPerms</code> base permissions applyed to admin warns <code>LGHWarns</code> | <code>null</code> warns.js plugin related data rules <code>customMessage</code> | <code>null</code> rules.js plugin related data welcome <code>LGHWelcome</code> | <code>null</code> welcome.js plugin related data flood <code>LGHFlood</code> | <code>null</code> antiflood.js plugin related data spam <code>LGHSpam</code> | <code>null</code> antispam.js plugin related data captcha <code>LGHCaptcha</code> | <code>null</code> captcha.js plugin related data goodbye <code>LGHGoodbye</code> | <code>null</code> goodbye.js plugin related data alphabets <code>LGHAlphabetBasedPunish</code> | <code>null</code> alphabets.js plugin related data media <code>LGHMedia</code> | <code>null</code> media.js plugin related data <p></p>"},{"location":"documentation/GHBot/#lghchat-telegrambotchat-customchat","title":"LGHChat : <code>TelegramBot.Chat</code> | <code>CustomChat</code>","text":"<p>Full LGH chat object given by LGHBot events, custom items avaiable if working about a group</p> <p>Kind: global typedef </p>"},{"location":"documentation/GHBot/#customuser-object","title":"CustomUser : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description perms <code>LGHPerms</code> | <code>null</code> temporary object with summary of user permissions lang <code>String</code> current user lang waitingReply <code>String</code> set to true if the bot is expecting a message from the user <p></p>"},{"location":"documentation/GHBot/#lghuser-telegrambotuser-customuser","title":"LGHUser : <code>TelegramBot.User</code> | <code>CustomUser</code>","text":"<p>Custom chat object given by LGHBot events, custom items avaiable if working about a group</p> <p>Kind: global typedef </p>"},{"location":"documentation/GHBot/#parsedcommand-object","title":"ParsedCommand : <code>Object</code>","text":"<p>ParsedCommand Object.</p> <p>Kind: global typedef Properties</p> Name Type Description text <code>string</code> The original text input. prefix <code>string</code> The prefix used in the command (e.g., \"/\", \"!\", \".\"). botCommand <code>string</code> The command with bot name (e.g., \"start@usernamebot\"). name <code>string</code> The name of the command. bot <code>string</code> The bot name (if available). args <code>string</code> | <code>boolean</code> The arguments of the command (optional). splitArgs <code>Array.&lt;string&gt;</code> | <code>boolean</code> The split arguments of the command (optional). <p></p>"},{"location":"documentation/GHBot/#customcommand-object","title":"CustomCommand : <code>Object</code>","text":"<p>Additional items to command for LGH</p> <p>Kind: global typedef Properties</p> Name Type Description target <code>TargetUser</code> | <code>null</code> Optional temporary object with data about a target LGH user in the command, false if no target found <p></p>"},{"location":"documentation/GHBot/#custommessage-object_1","title":"CustomMessage : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description chat <code>LGHChat</code> Always original chat object where the message is coming from command <code>ParsedCommand</code> | <code>CustomCommand</code> result of message text parsed with parseCommand() target <code>TargetUser</code> | <code>null</code> Optional temporary object with data about a command target waitingReply <code>string</code> | <code>null</code> Optional temporary object with waitingReply data for the selected chat waitingReplyTarget <code>TargetUser</code> | <code>null</code> Optional temporary object with data about a target LGH user, false if no target found <p></p>"},{"location":"documentation/GHBot/#lghmessage-telegrambotmessage-custommessage","title":"LGHMessage : <code>TelegramBot.Message</code> | <code>CustomMessage</code>","text":"<p>Custom chat object given by LGHBot events, custom items avaiable if working about a group</p> <p>Kind: global typedef </p>"},{"location":"documentation/GHBot/#customcallback-object","title":"CustomCallback : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description chat <code>LGHChat</code> Always original chat object where the callback is coming from target <code>TargetUser</code> Optional temporary object with data about a target LGH user in the command, false if no target found <p></p>"},{"location":"documentation/GHBot/#lghcallback-telegrambotcallbackquery-customcallback","title":"LGHCallback : <code>TelegramBot.CallbackQuery</code> | <code>CustomCallback</code>","text":"<p>Custom callback object given by LGHBot events, custom items may be avaiable</p> <p>Kind: global typedef </p>"},{"location":"documentation/GHBot/#chatsdatabase-object","title":"chatsDatabase : <code>Object</code>","text":"<p>Object containing chat-related database functions.</p> <p>Kind: global typedef Properties</p> Name Type Description add <code>function</code> Function to add a new chat to the database. ------------------------------------ <code>function(TelegramBot.Chat): boolean</code> delete <code>function</code> Function to delete a chat from the database. ------------------------------------ <code>function(TelegramBot.ChatId): boolean</code> exhist <code>function</code> Function to check if a chat exhists in the database. ------------------------------------ <code>function(TelegramBot.ChatId): boolean</code> get <code>function</code> Function to retrieve a chat from the database. ------------------------------------ <code>function(LGHChat): boolean</code> update <code>function</code> Function to update a chat in the database. ------------------------------------ <code>function(LGHChat): boolean</code> save <code>function</code> Function to save a chat to the database. ------------------------------------ <code>function(TelegramBot.ChatId): boolean</code> <p></p>"},{"location":"documentation/GHBot/#usersdatabase-object","title":"usersDatabase : <code>Object</code>","text":"<p>Object containing user-related database functions.</p> <p>Kind: global typedef Properties</p> Name Type Description add <code>function</code> Function to add a new user to the database. ------------------------------------ <code>function(TelegramBot.User): boolean</code> delete <code>function</code> Function to delete a user from the database. ------------------------------------ <code>function(TelegramBot.ChatId): boolean</code> exhist <code>function</code> Function to check if a user exhists in the database. ------------------------------------ <code>function(TelegramBot.ChatId): boolean</code> get <code>function</code> Function to retrieve a user from the database. ------------------------------------ <code>function(TelegramBot.ChatId): LGHUser</code> update <code>function</code> Function to update a user in the database. ------------------------------------ <code>function(LGHUser): boolean</code> <p></p>"},{"location":"documentation/GHBot/#lghdatabase-object","title":"LGHDatabase : <code>Object</code>","text":"<p>Type returned by the getDatabase function.</p> <p>Kind: global typedef Properties</p> Name Type Description innerDir <code>string</code> Location where the database folder should be placed (and/or generated). dir <code>string</code> Full path to the database folder. chatsDir <code>string</code> Full path to the chats folder within the database. usersDir <code>string</code> Full path to the users folder within the database. chats <code>chatsDatabase</code> Object containing chat-related database functions. users <code>usersDatabase</code> Object containing user-related database functions. unload <code>function</code> Function to unload chats from memory. <p></p>"},{"location":"documentation/GHBot/#libreghelp-object","title":"LibreGHelp : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description GHbot <code>LGHInterface</code> Public interface for LGH Functions TGbot <code>TelegramBot</code> Raw telegram bot api db <code>LGHDatabase</code> Database interface"},{"location":"documentation/TODO-List/","title":"TODO List","text":"<p>If you want an idea of what currently miss on the bot and you may want to implement it, that's the right page</p> <p>-short term:</p> <pre><code>allow to edit single user perms\n</code></pre> <p>-medium term:</p> <pre><code>allow on /perms to change user perms and roles, +add it in a button for /info or when a role is set (/free /mod etc..), +ask double confirm to give an user the \"settings\" and \"roles\" permission   \nsupport for anonymous admins    \nallow to customize /staff allowing to set roles to hide   \ncreate a privacy setting where users can ask to esclude themself from tagResolver and replace his's first name in database with \"Anonymous\"   \nallow to disable tagResolver log on group settings    \nallow to /mute only text, or media, or specific media type or extras      \ncreate a privacy option to allow a user deleting his data from the bot    \ncustom roles    \noptimize database.get, .update and .save to store in temporal array most used users   \nimplement time zone setting +implement it in /info\n</code></pre> <p>-long  term:</p> <pre><code>add log channel   \nchatIds anonymization on database   \ncompress chats data stored on database    \nsupport all group help functions and more (+anti-sheduled messages[msg.is_from_offline], )    \nallow bot clone bot when user give a token    \nadd optionally an userbot (when active implement in tagResolver.js)   \nuser should have an option to delete also his warn or roles data from the entire database but accepting that he is going to be banned by any group where he got at least a warn and accepting that he is going to lose any acquired role on every group     \nmake plugins more independed    \nallow a plugin to add itself a button on settings page (more independent)\n</code></pre> <p>-other things:</p> <pre><code>implement direct private settings with /*settings       \na check system to drop wrong formatted cb.data and waitingReply   \nallow to see perms calculation trough user perms, then roles by priority, then base group perms, going from left to right (or opposite)   \nadd something to allow a group admin to identify all users with additional bot perms    \n?add an automatic leveling system for admins? (maybe?)    \nadd photo preview-mode in MessageMaker.js   \nallow to warn only usersIds who exhist on telegram, it can be checked if applyng a restriction returns true   \nadd config to allow/disallow adding bot from non-admin users    \n?identify reply_parameters and add everytime allow_sending_without_reply? (GHBot.js)        \n/inactives [days] sends in private chat the list of users who have not sent a message in the last [days], with the possibility of punish them.    \n/pin [message] - sends the message through the Bot and pins it.   \n/editpin [message] - edits the current pinned message (if sent from the Bot).   \n/delpin - removes the pinned message.   \n/repin - removes and pins again the current pinned message, with notification!    \n/pinned - refers to the current pinned message.   \n/list - sends in private chat the list of users of the group with the number of messages sent by them.    \n/list roles - sends in private chat the list of all the special roles assigned to users   \n/graphic - sends a graph showing the trend of the group members.    \n/trend - sends the group's growth statistics.   \n/logdel - deletes the selected message and sends it to the Log Channel    \n/send - permits to send a post through the Bot with parse mode support\n</code></pre>"},{"location":"documentation/callbacks/","title":"Expect messages/buttons","text":""},{"location":"documentation/callbacks/#lgh-hirarchy","title":"LGH Hirarchy","text":"<p>We need to expect button clicks and messages from users to be able to perform most of actions for our bot</p> <p>That's why we need an unified hirarchy of how callbacks data are organized, on LibreGroupHelp they are avaiable for buttons on <code>cb.data</code> and <code>msg.waitingReply</code> for messages, we will talk about how to expect user messages soon, but first you should follow the right hirachy so main.js can set right variables for LGH Events</p> <p></p> <p>That's the hirarchy:</p> <p><code>CallbackName_opt1_opt2!data#editorName_opt1_opt2|editorData:groupId?targetUserId</code></p> <p></p> <p>It works too with less items like this: <code>CallbackName:groupId</code>, <code>CallbackName#editor?targetUserId</code>, <code>CallbackName:groupId?targetUserId</code>.</p> <p></p> <p>CallbackName Name of callback that you can use, be sure that not conflicts with other names, often plugins check if it's their match with <code>string.startsWith()</code>, <code>opt1</code> and <code>opt2</code> separated by <code>_</code> is avaiable to futher go deep with your callback listener</p> <p>data Some additional data that you can attach to CallbackName (requires <code>CallbackName</code>)</p> <p>editorName Also that is often identified with string.startsWith(), it's usually used by re-usable menus like MessageMaker.js, setNum.js, setTime.js</p> <p>What are editors?</p> <p>editorData Additional data that editor may attach (requires <code>editorName</code>)</p> <p>groupId  This value when given allow main.js to set by any chat context a specific full chat object on it's events inside GHBot (<code>msg.chat</code> or <code>cb.message.chat</code> are not affected) and <code>user.perms</code> related to user permissions on the given groupId</p> <p>Read how groupId helps LGH Events</p> <p>targetUserId This value when given allow main.js to set a specific target user in various cases: <code>cb.target</code>, <code>msg.waitingReplyTarget</code> (note: it's volontarily separated from <code>msg.target</code> that's command target dedicated)</p> <p>Read how targetUserId helps LGH Events</p>"},{"location":"documentation/callbacks/#expect-user-messages","title":"Expect user messages","text":"<p>In this example i will show you how to expect futher message from user and, listen it back when he replicate, and then disable futher message expectations</p> <p>For messages callbacks comes at help 2 functions:</p> <p>waitReplyForChat(database, callback, user, chat, onGroup)   unsetWaitReply(database, user, chat, onGroup)</p> <p></p> <p>Keep in mind that Callback Hirarchy upon explained has to be followed</p> <pre><code>const LGHelpTemplate = require(\"../GHbot.js\")\nconst {waitReplyForChat, unsetWaitReply} = require( \"../api/utils/utils.js\" );\n\nfunction main(args)\n{\n\n  const GHbot = new LGHelpTemplate(args);\n  const {TGbot, db, config} = GHbot;\n\n  GHbot.onMessage( (msg, chat, user) =&gt; {\n\n    if(msg.text != \"/guess\") return;\n\n    //if users type /guess expect a message with \"EXPECT_PASSWORD\" callback\n\n    /**\n     * waitReplyForChat, if chat.isGroup == false, will set \n     * automatically the callback as EXAMPLE:groupId\n    */\n    waitReplyForChat(db, \"EXPECT_PASSWORD\", user, chat, chat.isGroup)\n\n    GHbot.sendMessage(user.id, chat.id, \"Guess the password\")\n\n  })\n\n  GHbot.onMessage( (msg, chat, user) =&gt; {\n\n    var isMyCallback = msg.waitingReply &amp;&amp; msg.waitingReply.startsWith(\"EXPECT_PASSWORD\")\n    if(!isMyCallback) return;\n\n    if(msg.text == \"password1234\"){\n      GHbot.sendMessage(user.id, chat.id, \"Congratulation, password guessed!\")\n      unsetWaitReply(db, user, chat, chat.isGroup) //do not expect futher messages\n    }\n    else{\n      GHbot.sendMessage(user.id, chat.id, \"Password incorrect, try again ): \")\n    }\n\n  })\n\n}\n\nmodule.exports = main;\n</code></pre> <p>When you are expecting a message other plugins will see (with <code>msg.waitingReply</code> != false) your decision and they may stop working until you finished, so be sure to use unsetWaitReply eventually</p>"},{"location":"documentation/callbacks/#expect-user-button-clicks","title":"Expect user button clicks","text":"<p>Currently LGH has no special procedure to expect button clicks, just follow the hirarchy and do how you would do with TGbot</p> <p>You find an example here: LGH Events: Expect buttons clicks </p>"},{"location":"documentation/commands/","title":"Create a command","text":"<p>LibreGroupHelp offers multi-language command support, when the user sends a command LGH will try to resolve the command trying first to translate the raw one to the command code (usually starting with <code>COMMAND_</code>), then, if registered, their function will be ran</p>"},{"location":"documentation/commands/#create-command-lang-code","title":"Create command lang-code","text":"<p>Before registering your first command you need to know how to add it to the bot dictionary</p> <p>Open <code>langs/en_en.json</code> and scroll down below until you find the values keys starting with <code>\"COMMAND_\"</code></p> <pre><code>\"/rules\": \"COMMAND_RULES\",\n\"/regulation\" : \"COMMAND_RULES\",\n\"COMMAND_RULES\" : \"rules\",\n\"CMDDESC_RULES\" : \"/{name} or /regulation\\nSend group regulament message, it can be changed in settings\",\n\"/permissions\": \"COMMAND_PERMS\",\n\"/perms\": \"COMMAND_PERMS\",\n\"COMMAND_PERMS\" : \"perms\",\n</code></pre> <p>As you see, <code>\"COMMAND_RULES\" : rules</code> define the main command as the <code>/rules</code> one  But it owns also some alias, still linked to <code>COMMAND_RULES</code></p> <pre><code>\"/rules\": \"COMMAND_RULES\",\n\"/regulation\" : \"COMMAND_RULES\",\n</code></pre> <p>Both <code>/rules</code> and <code>/regulation</code> will fire up the same function</p> <p>We see also a <code>\"CMDDESC_RULES\"</code> parameter with a <code>{name}</code> substitution key, set this value can help back in some cases where bot has to show a short description of what the command does, it's not mandatory to add this but is reccomended</p> <p></p> <p>Now add our own command</p> <pre><code>\"/example\" : \"COMMAND_EXAMPLE\",\n\"/showcase\" : \"COMMAND_EXAMPLE\",\n\"/anotheralias\" : \"COMMAND_EXAMPLE\",\n\"COMMAND_EXAMPLE\" : \"example\",\n\"CMDDESC_EXAMPLE\" : \"/{name} or /showcase or /anotheralias\\nThese are just commands to show an example on LibreGroupHelp Wiki\"\n\"/rules\": \"COMMAND_RULES\",\n\"/regulation\" : \"COMMAND_RULES\",\n\"COMMAND_RULES\" : \"rules\",\n\"CMDDESC_RULES\" : \"/{name} or /regulation\\nSend group regulament message, it can be changed in settings\",\n\"/permissions\": \"COMMAND_PERMS\",\n\"/perms\": \"COMMAND_PERMS\",\n\"COMMAND_PERMS\" : \"perms\",\n</code></pre> <p>We added as main command of <code>COMMAND_EXAMPLE</code> the command <code>/example</code>, anyway also <code>/showcase</code> and <code>/anotheralias</code> are avaiable as aliases</p> <p>Note: <code>\"/example\" : \"COMMAND_EXAMPLE\"</code> and <code>\"COMMAND_EXAMPLE\" : \"example\"</code> are always both needed, even if example is already described as the main command, it has to be anyway in the aliases list</p>"},{"location":"documentation/commands/#register-command","title":"Register command","text":"<p>The command registering tool can be required with <code>const GHCommand = require(\"../api/tg/LGHCommand.js\")</code></p> <p>To reply a command the right procedure is using the sendCommandReply utility (from  <code>api/utils/utils.js</code> )</p> <p>Giving back to <code>sendCommandReply</code> the <code>GHCommand.registerCommand</code> parameters will allow it to decide what is the correct destination chat to reply, running then a callback that gives you a <code>chadId</code> where to reply</p> <p>That's because the user may have the permission to use this command only with a private bot reply, but there are also many other caveuts, this system will handle everything for you, so you can focus on the acutal command creation</p> <p>Here an example:</p> <pre><code>const { sendCommandReply } = require(\"../api/utils/utils.js\");\nconst GHCommand = require(\"../api/tg/LGHCommand.js\");\nconst LGHelpTemplate = require(\"../GHbot.js\");\n\nfunction main(args)\n{\n\n  const GHbot = new LGHelpTemplate(args);\n  const {TGbot, db, config} = GHbot;\n\n  GHCommand.registerCommands([\"COMMAND_EXAMPLE\"], (msg, chat, user, private, lang, key, keyLang) =&gt; {\n\n    //we want this command to work only if from groups\n    if(!msg.chat.isGroup) return; \n\n    sendCommandReply(private, lang, GHbot, user.id, chat.id, (sendId)=&gt;{\n      var text = \"Thanks for the interest into LGH, we appreciate this\";\n      GHbot.sendMessage(user.id, sendId, text);\n    })\n\n  })\n\n}\n\nmodule.exports = main;\n</code></pre> <p>If are you sure that your command reply has always to be on the group you can still set <code>false</code> instead of <code>private</code> on <code>sendCommandReply</code></p> <p>In the same way if your command reply should be always on private chat, you set <code>true</code> instead of <code>private</code></p> <p>Note: <code>msg</code>, <code>chat</code> and <code>user</code> are exactly the same parameters you get within LGH Events, they come acutally from there</p>"},{"location":"documentation/commands/#some-insights","title":"Some insights","text":"<p>Any msg object contains msg.command, can be useful to handle more parameters on your command</p> <p>Why first parameter of <code>GHCommand.registerCommands</code> is an array?   Yes it's exactly what you think, you can run the same function for more commands, but why?</p> <p>I will show you this directly using <code>promote.js</code> plugin as example</p> <pre><code>var commandsList = [\"COMMAND_FREE\", \"COMMAND_UNFREE\", \"COMMAND_HELPER\", \"COMMAND_UNHELPER\", \"COMMAND_CLEANER\", \"COMMAND_UNCLEANER\",\n  \"COMMAND_MUTER\", \"COMMAND_UNMUTER\", \"COMMAND_MODERATOR\", \"COMMAND_UNMODERATOR\", \"COMMAND_COFOUNDER\", \"COMMAND_UNCOFOUNDER\",\n  \"COMMAND_ADMINISTRATOR\", \"COMMAND_UNADMINISTRATOR\", \"COMMAND_TITLE\", \"COMMAND_UNTITLE\"];\n\nGHCommand.registerCommands(commandsList, async (msg, chat, user, private, lang, key, keyLang) =&gt; {\n  if(!msg.chat.isGroup) return;\n\n  /**\n   *  note how we return in case of msg.waitingReply, that's because\n   *  otherwise we would handle this command also while the user is\n   *  dealing with some other piece of the bot \n   * */\n  if(msg.waitingReply) return;\n\n  var command = msg.command;\n  var lang = msg.chat.lang;\n  var target = msg.waitingReplyTarget || msg.target;\n  var text = false;\n  var options = {parse_mode : \"HTML\"};\n  var toSetRole = false;\n  var toUnsetRole = false;\n\n  if( key == \"COMMAND_FREE\")\n    toSetRole = \"free\";\n  if( key == \"COMMAND_UNFREE\")\n    toUnsetRole = \"free\";\n\n  if( key == \"COMMAND_HELPER\")\n    toSetRole = \"helper\";\n  if( key == \"COMMAND_UNHELPER\")\n    toUnsetRole = \"helper\";\n\n  if( key == \"COMMAND_CLEANER\")\n    toSetRole = \"cleaner\"\n  if( key == \"COMMAND_UNCLEANER\")\n    toUnsetRole = \"cleaner\";\n\n  if( key == \"COMMAND_MUTER\")\n    toSetRole = \"muter\";\n  if( key == \"COMMAND_UNMUTER\")\n    toUnsetRole = \"muter\";\n\n  if( key == \"COMMAND_MODERATOR\")\n    toSetRole = \"moderator\";\n  if( key == \"COMMAND_UNMODERATOR\")\n    toUnsetRole = \"moderator\";\n\n  if( key == \"COMMAND_COFOUNDER\")\n    toSetRole = \"cofounder\"\n  if( key == \"COMMAND_UNCOFOUNDER\")\n    toUnsetRole = \"cofounder\";\n\n  if( key == \"COMMAND_ADMINISTRATOR\"){...}\n  if( key == \"COMMAND_UNADMINISTRATOR\"){...}\n  if( key == \"COMMAND_TITLE\"){...}\n  if( key == \"COMMAND_UNTITLE\"){...}\n\n  //check if user can change a role and if he can apply it to target\n  if(toSetRole || toUnsetRole){...}\n  if(toSetRole){...}\n  if(toUnsetRole){...}    \n})\n</code></pre> <p>As you see, in this case we need to listen for multiple commands at the same time as they need to run pretty the same code, we need only <code>key</code> to change <code>toSetRole</code> and <code>toUnsetRole</code> variable, then the code is same for everyone</p>"},{"location":"documentation/database/","title":"Database","text":"<p>As you may have seen by many examples, an object that we always get is db (database)</p> <pre><code>const LGHelpTemplate = require(\"../GHbot.js\")\n\nfunction main(args)\n{\n\n  const GHbot = new LGHelpTemplate(args);\n  const {TGbot, db, config} = GHbot;\n  ...\n}\n\nmodule.exports = main;\n</code></pre> <p>Database is the core of LibreGroupHelp to store chat and users data, as to the privacy implications of that we aim to minimize the amount of sensitive data there and anyway we keep in mind that the user should be able to remove any trace of him there</p>"},{"location":"documentation/database/#database-usage","title":"Database usage","text":"<p>Currently database let you control chats and users using same interface of functions</p> <p>You are supposed to use <code>update</code> method everytime you want to apply changes to one of them</p> <p><pre><code>const LGHelpTemplate = require(\"../GHbot.js\")\n\nfunction main(args)\n{\n\n  const GHbot = new LGHelpTemplate(args);\n  const {TGbot, db, config} = GHbot;\n\n  GHbot.onMessage( (msg, chat, user) =&gt; {\n\n    if(!chat.isGroup) return;\n\n    if( msg.text == \"/antiflood kind\" )\n    {\n      chat.flood.messages = 8;\n      chat.flood.time = 10;\n      db.chats.update(chat); //apply changes to database\n      GHbot.sendMessage( user.id, chat.id, \"Antiflood set to be kind\" );\n    }\n    else if( msg.text == \"/antiflood hard\" )\n    {\n      chat.flood.messages = 3;\n      chat.flood.time = 5;\n      db.chats.update(chat); //apply changes to database\n      GHbot.sendMessage( user.id, chat.id, \"Antiflood set to be hard\" );\n    }\n\n    if( msg.text == \"/anonymize\" )\n    {\n      user.first_name = \"anonymous\"\n      user.last_name = \"anonymous\"\n      db.users.update(users); //apply changes to database\n      GHbot.sendMessage( user.id, chat.id, \"Anonymized successfully\" );\n    }\n\n  } )\n\n}\n\nmodule.exports = main;\n</code></pre> You find all relative methods documented clicking db.chats and db.users</p> <p>Note: as written on Known issues there are a problem with chats interface of database wich gives a reference copy of a LGHChat object, that's mean that it may be eventually stored on database even without <code>update</code> functions, fixing this would require some code refacory, you should still follow the rule of using <code>update</code> to confirm changes, if you need to apply only temporary changes of an LGHChat object please make a deep copy</p>"},{"location":"documentation/editors/","title":"What are editors?","text":"<p>Editors are a way create re-usable interfaces of panels, with their expect messages and expect buttons callbacks handling to allow you to show something to an user or edit a variable, object, or something else</p> <p>As you already know by LGH Hirarchy, editors has their own space there, the reason why we need to make them separate is simple: You still need to know who is the caller of the editor it's so can correctly handle like a possible variable change</p> <p>Let's begin from the most useful of the editors, <code>MessageMaker</code>, that allow the user to modify a customMessage object and then also to send it as a telegram message</p> <p>That's how <code>rules.js</code> uses that (some code not interested has been suppressed):</p> <pre><code>const LGHelpTemplate = require(\"../GHbot.js\");\nconst {sendCommandReply, waitReplyForChat, unsetWaitReply} = require( \"../api/utils/utils.js\" );\nconst MSGMK = require( \"../api/editors/MessageMaker.js\" )\n...\n\nfunction main(args)\n{\n\n  const GHbot = new LGHelpTemplate(args);\n  const {TGbot, db, config} = GHbot;\n  ...\n\n  GHbot.onMessage( async (msg, chat, user) =&gt; {\n\n    //check if it's our callback\n    if(!chat.isGroup) return;\n    if( !(msg.waitingReply &amp;&amp; msg.waitingReply.startsWith(\"S_RULES\")) ) return;\n    ...\n\n    /**\n     * rules never expect for other messages\n     * so we can give it all directly to MessageMaker hands\n     */\n    var customMessage = await MSGMK.messageEvent(GHbot, db, chat.rules, msg, chat, user, \"S_RULES\");\n\n    //then if customMessage has an update, we save that\n    if(customMessage)\n    {\n      chat.rules = customMessage;\n      db.chats.update(chat);\n    }\n\n  } )\n\n\n  GHbot.onCallback( (cb, chat, user) =&gt; {\n\n    var msg = cb.message;\n    var lang = user.lang;\n\n    //check if it's our callback\n    if(!chat.isGroup) return;\n    if( !cb.data.startsWith(\"S_RULES\")) return;\n    ...\n\n    //from rules panel we add a button to access MessageMaker\n    if( cb.data.startsWith(\"S_RULES_BUTTON:\") )\n    {\n\n      GHbot.editMessageText( user.id, l[lang].RULES_SETTING, {\n        ...\n        reply_markup : {inline_keyboard :[\n          [{\n            text: l[lang].RULES_CHANGE_BUTTON,\n            //we give a button to access MessageMaker\n            callback_data: \"S_RULES#MSGMK:\"+chat.id\n          }],\n          ...\n      ]}})\n      GHbot.answerCallbackQuery(user.id, cb.id);\n    }\n\n    //we listen here back for requested MessageMaker accesses\n    if( cb.data.startsWith(\"S_RULES#MSGMK\") )\n    {\n      var returnButtons = [[{text: l[lang].BACK_BUTTON, callback_data: \"S_RULES_BUTTON:\"+chat.id}]];\n      var title = l[lang].REGULATION;\n      var msgTitle = l[lang].RULES_TITLE;\n      //giving the buttons handling to MessageMaker hands\n      var customMessage = MSGMK.callbackEvent(GHbot, db, chat.rules, cb, chat, user, \"S_RULES\", returnButtons, title, msgTitle)\n\n      //then if customMessage has an update, we save that\n      if(customMessage)\n      {\n        chat.rules = customMessage;\n        db.chats.update(chat);\n      }\n    }\n    ...\n  })\n}\n\nmodule.exports = main;\n</code></pre> <p>The access point of MessageMaker is trough buttons callbacks, but it works then with the user also by expecting messages, so we need to forward also them</p>"},{"location":"documentation/events/","title":"Events","text":"<p>ONLY for events from GHBot you have additional elements on parameters bot-related</p> <p>Usually GHBot events has 3 parameters: (callback  or message), chat, user</p> <p>GHBot currently has 4 events fully supported</p> <pre><code>GHBot.onCallback( (cb, chat, user) =&gt; { console.log(cb) } )\nGHBot.onMessage( (msg, chat, user) =&gt; { console.log(msg) } ) \nGHBot.onEditedMessage( (msg, chat, user) =&gt; { console.log(msg) } ) \nGHBot.onEditedMessageText( (msg, chat, user) =&gt; { console.log(msg) } ) \n</code></pre>"},{"location":"documentation/events/#chat-data","title":"Chat data","text":"<p>So how GHBot enchanches events for LibreGroupHelp more than using the raw TGBot?</p> <p>First at all, it allow us to get already a full chat object from the database, thus giving you the full chat configuration</p> <pre><code>const { punishmentToFullText } = require(\"../api/utils/utils.js\");\nconst LGHelpTemplate = require(\"../GHbot.js\")\n\nfunction main(args)\n{\n\n  const GHbot = new LGHelpTemplate(args);\n  const {TGbot, db, config} = GHbot;\n\n  GHbot.onMessage( (msg, chat, user) =&gt; {\n\n    var runTest = msg.chat.isGroup &amp;&amp; msg.text == \"/test\"\n    if( !runTest ) return;\n\n    console.log(\"Logging chat flood settings\")\n    console.log(\"Message limit: \" + msg.chat.flood.messages)\n    console.log(\"Fire if sent within \" + msg.chat.flood.time + \" seconds\")\n    var punish = punishmentToFullText(user.lang, msg.chat.flood.punishment, msg.chat.flood.PTime, msg.chat.flood.delete)\n    console.log(\"User will be punished with \" + punish)\n\n  } )\n\n}\n\nmodule.exports = main;\n</code></pre> <p>Output if any user type <code>/test</code> on a group:</p> <p>Logging chat flood settings   Message limit: 3   Fire if sent within 5 seconds   User will be punished with Warn for 1 day + delete</p> <p>You may wonder why we use msg.chat instead of chat? You get that in detail on Expect messages section, shotly it's because we want to work on the chat where the message is coming from, not the select chat</p>"},{"location":"documentation/events/#user-permissions","title":"User permissions","text":"<p>We may also want to allow the user to change settings, but we need to know if he has the permission to do that, so we have user.perms containing a permissions object about the user on that chat</p> <p>Note: user.perms is a temporary item</p> <pre><code>const LGHelpTemplate = require(\"../GHbot.js\")\n\nfunction main(args)\n{\n\n  const GHbot = new LGHelpTemplate(args);\n  const {TGbot, db, config} = GHbot;\n\n  GHbot.onMessage( (msg, chat, user) =&gt; {\n\n    if(!chat.isGroup) return;\n\n    //we never listen to commands like this on LGH, it's just as example\n    if( !msg.text.startsWith(\"/antiflood\") ) return\n\n    //Check for user permissions to change settings\n    if(user.perms.settings != 1)\n    {\n      GHbot.sendMessage(user.id, chat.id, \"You haven't settings permission\");\n      return;\n    }\n\n    if( msg.text == \"/antiflood kind\" )\n    {\n      chat.flood.messages = 8;\n      chat.flood.time = 10;\n      db.chats.update(chat); //apply changes to database\n      GHbot.sendMessage( user.id, chat.id, \"Antiflood set to be kind\" );\n    }\n    else if( msg.text == \"/antiflood hard\" )\n    {\n      chat.flood.messages = 3;\n      chat.flood.time = 5;\n      db.chats.update(chat); //apply changes to database\n      GHbot.sendMessage( user.id, chat.id, \"Antiflood set to be hard\" );\n    }\n\n  } )\n\n}\n\nmodule.exports = main;\n</code></pre>"},{"location":"documentation/events/#expect-messages","title":"Expect messages","text":"<p>GHBot makes also you easy to expect messages or callbacks from users in private chat and both still relating to the group, keeping the group chat object</p> <p>Let's see:</p> <pre><code>const { unsetWaitReply, waitReplyForChat } = require(\"../api/utils/utils.js\");\nconst LGHelpTemplate = require(\"../GHbot.js\")\n\nfunction main(args)\n{\n\n  const GHbot = new LGHelpTemplate(args);\n  const {TGbot, db, config} = GHbot;\n\n  GHbot.onMessage( async (msg, chat, user) =&gt; {\n\n    if(!msg.chat.isGroup) return;\n\n    if(msg.text == \"/antiflood\")\n    {\n      /**\n       * waitReplyForChat, if chat.isGroup == false, will set \n       * automatically the callback as EXAMPLE:groupId\n      */\n      waitReplyForChat(db, \"EXAMPLE\", user, chat, chat.isGroup);\n      var text = `Ok, antiflood should be kind or hard?\\n`+\n        `You can reply both here or private chat\\n`+\n        `@${TGbot.me.username}`;\n      GHbot.sendMessage(user.id, chat.id, text);\n    }\n\n  } )\n\n  GHbot.onMessage( (msg, chat, user) =&gt; {\n\n\n    /**\n     * Here, if msg.waitingReply has a groupId (ex. EXAMPLE:-109848493476)\n     * so it's following correctly the LGH Callbacks Hirarchy,\n     * the \"chat\" parameter would be bind to the group\n     * enriched by the database, we have a full LGH chat object\n     */\n\n    //So behaivor is different from \"if(!msg.chat.isGroup) return\"\n    if(!chat.isGroup) return; //think that as \"!selectedChat.isGroup\"\n    if( !msg.waitingReply.startsWith(\"EXAMPLE\") ) return;\n\n    //even on private chat, user.perms still exhist if a group is binded\n    if(user.perms.settings != 1)\n    {\n      GHbot.sendMessage(user.id, chat.id, \"You haven't settings permission\");\n      return;\n    }\n\n    if( msg.text == \"kind\" )\n    {\n      chat.flood.messages = 8;\n      chat.flood.time = 10;\n      db.chats.update(chat); //apply changes to database\n      GHbot.sendMessage( user.id, chat.id, \"Antiflood set to be kind\" );\n      unsetWaitReply(db, user, chat, chat.isGroup);\n    }\n    else if( msg.text == \"hard\" )\n    {\n      chat.flood.messages = 3;\n      chat.flood.time = 5;\n      db.chats.update(chat); //apply changes to database\n      GHbot.sendMessage( user.id, chat.id, \"Antiflood set to be hard\" );\n      unsetWaitReply(db, user, chat, chat.isGroup);\n    }\n\n    //msg.chat keeps for sure the chat wich message is coming from\n    var text = `This message is from private chat? ${!msg.chat.isGroup}`;\n    GHbot.sendMessage( user.id, chat.id, text);\n\n  } )\n\n}\n\nmodule.exports = main;\n</code></pre>"},{"location":"documentation/events/#expect-buttons-clicks","title":"Expect buttons clicks","text":"<p>Buttons callbacks works pretty in the same way:</p> <pre><code>const { punishmentToFullText } = require(\"../api/utils/utils.js\");\nconst LGHelpTemplate = require(\"../GHbot.js\");\n\nfunction main(args)\n{\n\n  const GHbot = new LGHelpTemplate(args);\n  const {TGbot, db, config} = GHbot;\n\n  GHbot.onMessage( async (msg, chat, user) =&gt; {\n\n    if(!msg.chat.isGroup) return;\n\n    //we never listen to commands like this on LGH, it's just as example\n    if(msg.text == \"/private\")\n    {\n      var text = \"Proceed on private chat\\n@\"+TGbot.me.username;\n      var buttons = [[\n        {\n          //As you see we follow the hirarchy\n          callback_data: \"EXAMPLE_SHOW_CONFIG:\"+chat.id,\n          text: \"Show antiflood config\"\n        }\n      ]];\n      var options = {reply_markup:{inline_keyboard:buttons}};\n      GHbot.sendMessage(user.id, user.id, text, options);\n    }\n\n  } )\n\n  GHbot.onCallback( (cb, chat, user) =&gt; {\n\n    /**\n     * Also here, if cb.data has a groupId (ex. EXAMPLE:-109848493476)\n     * following correctly the LGH Callbacks Hirarchy\n     * the \"chat\" parameter would be bind to the group\n     * enriched by the database we have a full LGH chat object\n     */\n\n    if(!chat.isGroup) return;\n\n    //callback data is stored on cb.data\n    if( !cb.data.startsWith(\"EXAMPLE\") ) return\n\n    /**\n     * Note: we use cb.chat.id, because editMessageText\n     * needs the chatId where callback is coming from\n     */\n    var editOpts = {\n      message_id: cb.message.message_id,\n      chat_id: cb.chat.id,\n    }\n\n    if(user.perms.settings != 1)\n    {\n      GHbot.editMessageText(user.id, \"You haven't settings permission\", editOpts);\n      return;\n    }\n\n    if( cb.data.startsWith(\"EXAMPLE_SHOW_CONFIG\") )\n    {\n      var punish = punishmentToFullText(user.lang, chat.flood.punishment, chat.flood.PTime, chat.flood.delete)\n      var text = `Chat flood settings\n        Message limit: ${chat.flood.messages}\n        Fire if sent within ${chat.flood.time} seconds\n        User will be punished with ${punish}`\n      GHbot.editMessageText(user.id, text, editOpts);\n    }\n\n    //cb.chat keeps for sure the chat wich message is coming from\n    GHbot.sendMessage( user.id, chat.id, \"This callback is from private chat? \" + !cb.chat.isGroup );\n\n  } )\n\n}\n\nmodule.exports = main;\n</code></pre>"},{"location":"documentation/events/#target-user","title":"Target user","text":"<p>As you may have seen from the LGH Callbacks hirarchy, after <code>?</code> exhists a parameter for target users, this callback parameter allows you to bind an user intended to be affected in some way trough the callback, so he is going to be avaiable on cb.target or msg.waitingReplyTarget</p> <p>If you need instead data about a direct target of a message you have msg.target</p> <p>These are some cases where msg.target appears:   User X, replying to User Y, Y is the target  User X, use a command mentioning Y (ex. <code>/ban @UserY</code>), Y is the target </p> <p>That comes useful while handling a command after a Command creation</p>"},{"location":"documentation/events/#conclusion","title":"Conclusion","text":"<p>Is better to think about the chat parameter as the selected chat, not the chat we are (that's on msg.chat), but the chat where we are asked to work on</p>"},{"location":"documentation/known-issues/","title":"Known possible bugs:","text":"<p>-sometimes db.chats.update in plugins may be not used at all because you can still edit the global object cause to reference, not using it may cause some issue. +if global reference get cleared too early code may try to access and inexistent variable</p> <p>-cleanHTML() may be not applyed in some text where it should, and nothing assure that it's 100% able to clean everything needed for telegram api</p> <p>-if you add a new permission on userPerms object, every userPerms object should be updated adding that, otherwise this may cause incorrect result in sumUserPerms</p> <p>-in some unkown cases you may get stuck in exceptions menu and SafeGram.js will block any user request due too high accumulated volume of something pending</p> <p>-permissions setup on first bot adding to groups is not the same as using /reload that's more complete</p>"},{"location":"documentation/languages/","title":"Languages","text":""},{"location":"documentation/languages/#language-info","title":"Language info","text":"<p>LibeGrouHelp has a language configuration for users (user.lang) and for groups (chat.lang)</p> <p>When our bot is added to a group the default group language will be inherited from the user who added LGH Bot</p> <p>Note: currently LGH does not inherit the user language from it's device telegram settings, but it's planned as a future feature</p> <p><code>global.LGHLangs</code> is an object with every language translation loaded  Usually plugins get that using <code>l = global.LGHLangs</code>  To translate use this format: <code>l[lang].KEY</code></p> <p>Don't bother for missing keys in case of missing translation, every missing key is already replaced with the english one version</p>"},{"location":"documentation/languages/#extend-bot-dictionary","title":"Extend bot dictionary","text":"<p>The main language is english, so open <code>langs/en_en.json</code> and simply insert new parameters there</p> <pre><code>\"FLAG\" : \"\ud83c\uddec\ud83c\udde7\",\n\"LANG_SELECTOR\" : \"\ud83c\uddec\ud83c\udde7 English\",\n\"LANG_NAME\" : \"International English\",\n\"LANG_SHORTNAME\" : \"English\",\n\"LANG_CHOOSE\" : \"\ud83c\uddec\ud83c\udde7 Choose your language\",\n\"LANG_CHOOSE_GROUP\" : \"\ud83c\uddec\ud83c\udde7 Choose group language\",\n\"EXAMPLE_MESSAGE\" : \"This a new item on dictionary for wiki example\"\n</code></pre>"},{"location":"documentation/plugins/","title":"Plugins","text":"<p>You can create any plugin you want creating a new file inside <code>plugins</code> folder</p> <p>Look at <code>example.js</code> to see how it should be organized:</p> <pre><code>const LGHelpTemplate = require(\"../GHbot.js\")\n\nfunction main(args)\n{\n\n  const GHbot = new LGHelpTemplate(args);\n  const {TGbot, db, config} = GHbot;\n\n  //here your plugin code//\n\n  l = global.LGHLangs; //importing langs object\n\n  GHbot.onMessage( (msg, chat, user) =&gt; {\n\n    if( chat.type == \"private\" &amp;&amp; msg.text == \"/test999\" )\n      GHbot.sendMessage( user.id, chat.id, \"Hello, i send this because im a plugin\\n\"+l[user.lang].flag );\n\n  } )\n\n\n}\n\nmodule.exports = main;\n</code></pre> <p>Put and import in your plugin any needed utility on <code>api</code> folder, but if you know that some functions will be ever needed only on your plugin, you are free to declare it directly there</p>"},{"location":"plugins/","title":"Plugins documentation","text":"<p>Here you can find every documentation about any plugin and editors</p> <p>Use left side panel to navigate</p>"},{"location":"plugins/antiflood/","title":"Anti Flood","text":"<p>File: <code>antiflood.js</code></p> <p>Description: Plugin to punish users who send messages on a group too fast, configuration accessible on settings</p>"},{"location":"plugins/antiflood/#objects-implemented","title":"Objects implemented","text":"<ul> <li>LGHFlood Use cases: LGHChat.flood </li> </ul>"},{"location":"plugins/antispam/","title":"Anti Spam","text":"<p>File: <code>antispam.js</code></p> <p>Description: Plugin to punish users who send spam messages on a group, this may include <code>quotes</code>, <code>forward</code>, <code>external links</code>, and <code>telegram links</code>, configuration accessible on settings</p>"},{"location":"plugins/antispam/#objects-implemented","title":"Objects implemented","text":"<ul> <li>LGHSpam Use cases: LGHChat.spam </li> </ul>"},{"location":"plugins/captcha/","title":"Captcha","text":"<p>File: <code>captcha.js</code></p> <p>Description: Plugin to prevent bot fake users from joining the group asking a captcha process to be not punished, configuration accessible on settings</p>"},{"location":"plugins/captcha/#objects-implemented","title":"Objects implemented","text":"<ul> <li>LGHCaptcha Use cases: LGHChat.captcha </li> </ul>"},{"location":"plugins/command-perms/","title":"Command permissions","text":"<p>File: <code>api/editors/CommandsPerms.js</code></p> <p>Description: Implements an editor menu to change commands on a permissions Object,</p> <p>Allows also to set up both permissions for user with private/group reply, and admin with private/group reply, in future it may be used to change perms for roles </p>"},{"location":"plugins/goodbye/","title":"Goodbye","text":"<p>File: <code>goodbye.js</code></p> <p>Description: Plugin to send a goodbye on private user chat and in the group when an user leaves, you can edit both trough settings with MessageMaker</p>"},{"location":"plugins/goodbye/#objects-implemented","title":"Objects implemented","text":"<ul> <li>LGHGoodbye Use cases: LGHChat.goodbye </li> </ul>"},{"location":"plugins/message-maker/","title":"Message maker","text":""},{"location":"plugins/message-maker/#informations","title":"Informations","text":"<p>File: <code>api/editors/MessageMaker.js</code></p> <p>Description: This is an editor who adds a panel to allow an user to configurate easly a message with <code>text</code>, <code>media</code> and <code>buttons</code>, then, using <code>MessageMaker.sendMessage</code> function you can send it anywhere</p>"},{"location":"plugins/message-maker/#substitutions","title":"Substitutions","text":"<p>It implements also a text substitution system extended optionally trough <code>config.allowExternalApi</code>, the substitutions are as follows:</p> <pre><code>\u2022 {ID} = user ID\n\n\u2022 {NAME} = first name of user\n\n\u2022 {SURNAME} = user surname\n\n\u2022 {NAMESURNAME} = name and surname\n\n\u2022 {GHNAME} = name in LGH format ( [userId] name/surname )\n\n\u2022 {USERNAME} = user @username\n\n\u2022 {MENTION} = link to the user profile\n\n\u2022 {LANG} = user language\n\n\u2022 {FLAG} = user language flag\n\n\u2022 {GROUPNAME} = group name\n\n\u2022 {GROUPUSERNAME} = group username\n\n\u2022 {GROUPID} = group id\n\n---\n\nconfig.allowExternalApi substitutions:\n\nSyntax: FIAT{SYMBOL:OPTION}\n\n\u2022 {BTC} {ETH} {BNB} {SOL} {XRP} {DOGE} {TON} {ADA} ... {XMR} = crypto price, avaiable any top2000 crypto symbol\n\n\u2022 {TOP1} {TOP2} ... {TOP2000} = get crypto symbol at specific classific height (max 2000) ({TOP1} will translate to \"BTC\", so {{TOP1}} is the same of {BTC} and will give you the crypto price)\n\n\u2022 Options: CAP(capitalization), VOL(24h volume), SUPPLY, RANK(cap classific), NAME, EXPLORER. (example: {BTC:CAP})\n\n\u2022 Convert from default to specific currency: ${number}, \u20ac{number}, \u00a3{number}, CHF{number} or \u20a3{number}.\n\n\u2022 Examples: {BNB}, \u20ac{BTC}, CHF{ETH}, \u00a3{BTC:CAP}, {XMR:SUPPLY}, \u20ac{{TOP15}} \u00a3{{TOP3}:NAME}\n\n\u2022 Api: https://api.coincap.io/v2/assets (https://docs.coincap.io/)\n\n\n---\n\nNOT IMPLEMENTED:\n\n\u2022 {RULES} = group regulation text\n\n\u2022 {DATE} = current date\n\n\u2022 {TIME} = current time\n\n\u2022 {WEEKDAY} = week day\n\n\u2022 {MONTH} = current month\n\n\u2022 {YEAR} = current year\n\n\u2022 {UNIX} = seconds since 1970/1/1\n</code></pre>"},{"location":"plugins/message-maker/#objects-implemented","title":"Objects implemented","text":"<ul> <li>customMessage Use cases: LGHChat.rules LGHWelcome.message   LGHGoodbye.gMsg   LGHGoodbye.pMsg    </li> </ul> <ul> <li>simpleMedia Use cases: customMessage.media </li> </ul>"},{"location":"plugins/pin/","title":"Pin","text":"<p>File: <code>pin.js</code></p> <p>Description: Plugin to add pin messages commands</p> <p>Commands: <code>/pin</code></p>"},{"location":"plugins/promote/","title":"Promotions","text":"<p>File: <code>promotions.js</code></p> <p>Description: This plugin add commands to promote users to any pre-made role by Roles manager</p> <p>Commands: <code>/free</code>, <code>/unfree</code>, <code>/helper</code>, <code>/unhelper</code>, <code>/cleaner</code>, <code>/uncleaner</code>, <code>/muter</code>, <code>/unmuter</code>, <code>/mod</code>, <code>/unmod</code>, <code>/cofounder</code>, <code>/uncofounder</code>, <code>/admin</code>, <code>/unadmin</code>, <code>/title</code>, <code>/untitle</code></p>"},{"location":"plugins/punish/","title":"Punishments","text":"<p>File: <code>punish.js</code></p> <p>Description: Implement punishent and unpunishent commands using the utility of <code>api/utils/punishment.js</code></p> <p>Commands: <code>/delete</code>, <code>/warn</code>, <code>/unwarn</code>, <code>/kick</code>, <code>/mute</code>, <code>/unmute</code>, <code>/ban</code>, <code>/unban</code></p>"},{"location":"plugins/roles-manager/","title":"Roles Manager","text":""},{"location":"plugins/roles-manager/#informations","title":"Informations","text":"<p>File: <code>usersHandler.js</code></p> <p>Description: This plugin manage users data and roles in the group, implements also <code>api/utils/rolesManager.js</code> to give an external interface to deal with roles</p> <p>Adds on <code>global.roles[roleName]</code> data about these pre-made roles: <code>founder</code>, <code>moderator</code>, <code>muter</code>, <code>cleaner</code>, <code>helper</code>, <code>free</code>.</p> <p>Commands: <code>/reload</code>, <code>/staff</code>, <code>/info</code>, <code>/perms</code>, <code>/forgot</code></p>"},{"location":"plugins/roles-manager/#objects-implemented","title":"Objects implemented","text":"<ul> <li>LGHRole Use cases: LGHChat.roles </li> </ul> <ul> <li>LGHPerms Use cases: LGHChat.basePerms  LGHChat.adminPerms   LGHUser.perms  LGHRole.perms   </li> </ul> <ul> <li>userStatus Use cases:   LGHChat.users   </li> </ul>"},{"location":"plugins/rules/","title":"Rules","text":"<p>File: <code>rules.js</code></p> <p>Description: Plugin to add rules of the group and allow to edit these trough settings with MessageMaker</p> <p>Commands: <code>/rules</code></p>"},{"location":"plugins/set-chat-based-punish/","title":"Set chat based punishment","text":""},{"location":"plugins/set-chat-based-punish/#informations","title":"Informations","text":"<p>File: <code>api/editors/setChatBasedPunish.js</code></p> <p>Description: This is an editor who adds a panel to allow an user to configurate easly a different punishment based on various chat types <code>private</code>, <code>bot</code>, <code>group</code>, <code>channel</code></p>"},{"location":"plugins/set-chat-based-punish/#objects-implemented","title":"Objects implemented","text":"<ul> <li>LGHChatBasedPunish Use cases: LGHSpam.forward   LGHSpam.quote    </li> </ul>"},{"location":"plugins/settings/","title":"Settings","text":"<p>File: <code>settings.js</code></p> <p>Description: This plugin manages settings for single users and settings panel for groups, lang settings are included</p> <p>Commands: <code>/settings</code></p>"},{"location":"plugins/warns/","title":"Warns","text":"<p>File: <code>warns.js</code></p> <p>Description: Plugin to implement warn configuration settings on a group</p>"},{"location":"plugins/warns/#objects-implemented","title":"Objects implemented","text":"<ul> <li>LGHWarns Use cases: LGHChat.warns </li> </ul>"},{"location":"plugins/welcome/","title":"Welcome","text":"<p>File: <code>welcome.js</code></p> <p>Description: Plugin to allow to set up trough settings with MessageMaker a welcome message for new users in the group </p>"},{"location":"plugins/welcome/#objects-implemented","title":"Objects implemented","text":"<ul> <li>LGHWelcome Use cases: LGHChat.welcome </li> </ul>"},{"location":"wiki/commands/","title":"\ud83d\udccb Commands","text":"<p>Some commands can use the <code>*</code> prefix (e.g., <code>/*rules</code>, <code>/*perms</code>) to force a reply on private chat, only if you have the right permissions inside the group</p>"},{"location":"wiki/commands/#note-for-devs","title":"Note for devs:","text":"<ul> <li><code>COMMAND_</code> code prefix means that the command is to be resolved on languages.</li> <li><code>COMMAND</code> codes is also used to define permitted commands on perms object.</li> <li><code>*</code> prefix on a command code/name means that user has permission to get the reply within private chat only (e.g., <code>*COMMAND_RULES</code>).</li> <li><code>@</code> prefix same behaivor of *, but reply allowed on group chat only instead (e.g., <code>@COMMAND_RULES</code>).</li> </ul>"},{"location":"wiki/commands/#general-commands","title":"General Commands","text":"<ul> <li> <p>/settings   Opens the group settings. Code: <code>COMMAND_SETTINGS</code></p> </li> <li> <p>/rules   Shows the group rules. Code: <code>COMMAND_RULES</code> Note: <code>*</code> Allowed</p> </li> <li> <p>/perms   Shows bot permissions of a user. Code: <code>COMMAND_PERMS</code> Note: <code>*</code> Allowed</p> </li> <li> <p>/staff   Shows group staff with default and custom roles. Code: <code>COMMAND_STAFF</code> Note: <code>*</code> Allowed</p> </li> <li> <p>/info   Shows information about a group user and allows editing. Code: <code>COMMAND_INFO</code> Note: <code>*</code> Allowed</p> </li> <li> <p>/me   Shows information about yourself. Code: <code>COMMAND_ME</code> Note: <code>*</code> Allowed</p> </li> <li> <p>/pin   Pins a chat message with or without a notification. Code: <code>COMMAND_PIN</code> Note: <code>*</code> Allowed</p> </li> <li> <p>/geturl    By replying to a message (via reply), you receive the link that refers directly to that message.   Code: <code>COMMAND_GETURL</code> Note: <code>*</code> Allowed   </p> </li> </ul>"},{"location":"wiki/commands/#help-commands","title":"Help Commands","text":"<ul> <li> <p>/help   Show a link to the LibreGroupHelp Wiki.  Code: <code>COMMAND_HELP</code> Note: Private only     </p> </li> <li> <p>/commands    Show a link with bot commands. Code: <code>COMMAND_COMMANDS</code> Note: Private only     </p> </li> <li> <p>/support   Contact bot support.   Code: <code>COMMAND_SUPPORT</code> Note: Private only   </p> </li> </ul>"},{"location":"wiki/commands/#punishment-commands","title":"Punishment Commands","text":"<ul> <li> <p>/del   Deletes a message. Code: <code>COMMAND_DELETE</code></p> </li> <li> <p>/warn   Warns a user and punishes them if they reach the group warning limit. Code: <code>COMMAND_WARN</code></p> </li> <li> <p>/unwarn   Removes a warning from a user. Code: <code>COMMAND_UNWARN</code></p> </li> <li> <p>/delwarn   Warns a user and deletes a message. Code: <code>COMMAND_DELWARN</code></p> </li> <li> <p>/kick   Kicks a user out of the group. Code: <code>COMMAND_KICK</code></p> </li> <li> <p>/delkick   Kicks a user and deletes a message. Code: <code>COMMAND_DELKICK</code></p> </li> <li> <p>/mute   Disables messaging for a user. Code: <code>COMMAND_MUTE</code></p> </li> <li> <p>/unmute   Re-enables messaging for a user. Code: <code>COMMAND_UNMUTE</code></p> </li> <li> <p>/delmute   Mutes a user and deletes a message. Code: <code>COMMAND_DELMUTE</code></p> </li> <li> <p>/ban   Permanently removes a user from the group. Code: <code>COMMAND_BAN</code></p> </li> <li> <p>/unban   Unbans a user from the group. Code: <code>COMMAND_UNBAN</code></p> </li> <li> <p>/delban   Bans a user and deletes a message. Code: <code>COMMAND_DELBAN</code></p> </li> </ul>"},{"location":"wiki/commands/#role-management-commands","title":"Role Management Commands","text":"<ul> <li> <p>/free   Assigns the free role to a user. Code: <code>COMMAND_FREE</code></p> </li> <li> <p>/unfree   Removes the free role from a user. Code: <code>COMMAND_UNFREE</code></p> </li> <li> <p>/helper   Assigns the helper role to a user. Code: <code>COMMAND_HELPER</code></p> </li> <li> <p>/unhelper   Removes the helper role from a user. Code: <code>COMMAND_UNHELPER</code></p> </li> <li> <p>/cleaner   Assigns the cleaner role to a user. Code: <code>COMMAND_CLEANER</code></p> </li> <li> <p>/uncleaner   Removes the cleaner role from a user. Code: <code>COMMAND_UNCLEANER</code></p> </li> <li> <p>/muter   Assigns the muter role to a user. Code: <code>COMMAND_MUTER</code></p> </li> <li> <p>/unmuter   Removes the muter role from a user. Code: <code>COMMAND_UNMUTER</code></p> </li> <li> <p>/mod   Assigns the moderator role to a user. Code: <code>COMMAND_MODERATOR</code></p> </li> <li> <p>/unmod   Removes the moderator role from a user. Code: <code>COMMAND_UNMODERATOR</code></p> </li> <li> <p>/cofounder   Assigns the cofounder role to a user. Code: <code>COMMAND_COFOUNDER</code></p> </li> <li> <p>/uncofounder   Removes the cofounder role from a user. Code: <code>COMMAND_UNCOFOUNDER</code></p> </li> </ul>"},{"location":"wiki/commands/#admin-commands","title":"Admin Commands","text":"<ul> <li> <p>/admin   Grants admin status to a user. Code: <code>COMMAND_ADMINISTRATOR</code></p> </li> <li> <p>/unadmin   Removes admin status from a user. Code: <code>COMMAND_UNADMINISTRATOR</code></p> </li> <li> <p>/title   Sets an administrator group title. Code: <code>COMMAND_TITLE</code></p> </li> <li> <p>/untitle   Removes an administrator group title. Code: <code>COMMAND_UNTITLE</code></p> </li> </ul>"},{"location":"wiki/commands/#privacy-commands","title":"Privacy Commands","text":"<ul> <li>/forgot   Removes all data about an user from your group. Code: <code>COMMAND_FORGOT</code></li> </ul>"},{"location":"wiki/configuration/","title":"Configuration guide (config.json)","text":""},{"location":"wiki/configuration/#essential-settings","title":"Essential settings","text":"<p>botToken: <code>String</code>  Your bot token gaven from @BotFather (ex. <code>4839574812:AAFD39kkdpWt3ywyRZergyOLMaJhac60qc</code>)</p> <p>botStaff: <code>Array&lt;userIds&gt;</code> List of User Ids considered bot staff (ex. <code>[33224765, 82399935]</code>)</p>"},{"location":"wiki/configuration/#privacy-settings","title":"Privacy settings","text":"<p>deleteChatDataAfterBotRemove: <code>Boolean</code> If enabled all chat data will be deleted from bot database when you kick the bot from a group</p> <p>overwriteChatDataIfReAddedToGroup: <code>Boolean</code>  If enabled chat data and configurations will be regenerated if bot has been re-added to the group overwriting the old one</p> <p>allowExternalApi: <code>Boolean</code>  Allow to gather additional data by various online api's, that's may reveal the ip of your server, default to false</p>"},{"location":"wiki/configuration/#other-settings","title":"Other settings","text":"<p>reserveLang: <code>String</code>  Main bot language, this will be used to overwrite other languages with incompleted translations, we advise to keep it unchanged or use a full implemented language</p> <p>saveDatabaseSeconds: <code>Number</code>  Number of seconds of how often loaded chats should be written on disk, useful to prevent data loss on crash</p> <p>saveTagResolverSeconds: <code>Number</code>  Number of seconds of how often tagResolver data should be saved on disk</p> <p>maxCallbackAge: <code>Number</code>  Maximum number of seconds a callback button should be old to be accepted by the bot, you can reduce this in case of incompatible callbacks after an update that cause crash</p> <p>preventSetUselessRoles: <code>Boolean</code>  Disallow from setting roles if it does not change the user status in the group</p> <p>chatWhitelist: <code>Array&lt;userIds&gt;</code>  If there are at least one element the bot will work only on these chat ids (ex. <code>[-10294995433434, -429930035587]</code>)</p> <p>privateWhitelist: <code>Boolean</code> True if chat whitelist should ignore also private chats not included in chatWhitelist, useless if chatWhitelist is disabled</p> <p>chatBlacklist: <code>Array&lt;userIds&gt;</code>  Bot wont more handle requests of Chat Ids on this list (ex. <code>[-10294995433434, -429930035587]</code>)</p>"},{"location":"wiki/configuration/#plugin-settings","title":"Plugin settings","text":"<p>ANTIFLOOD_msgMin: <code>Number</code>  minimum settable number of messages to triggher the antiflood</p> <p>ANTIFLOOD_msgMax: <code>Number</code>  maximum settable number of messages to triggher the antiflood</p> <p>ANTIFLOOD_timeMin: <code>Number</code>  minimum settable time in which N messages should be sent to triggher the antiflood</p> <p>ANTIFLOOD_timeMax: <code>Number</code>  maximum settable time in which N messages should be sent to triggher the antiflood</p> <p>minWarns: <code>Number</code>  minimum settable warns on settings</p> <p>maxWarns: <code>Number</code>  maximum settable warns on settings</p> <p></p>"},{"location":"wiki/perms/","title":"Permissions","text":"<p>Permissions is the system that define what the user is allowed or disallowed to do inside your group, what commands he can and can't use, and trough roles authority level, who he can penalize and who not</p> <p>An user inherits the autorithy level from the higher level among his roles</p> <p>You can always see the permissions and level that an user owns using <code>/perms</code></p>"},{"location":"wiki/perms/#calculating-user-permissions","title":"Calculating user permissions","text":"<p>The calculation of user permissions is made by levels of priority based on this order (the following list goes from lowest priority to higher):</p> <ul> <li> <p>\ud83d\udc65 Group basic permissions   The basic group permissions that's applied by default to every user, that has lowest priority on perms calculation    \ud83d\udd27 How to edit: <code>/settings</code> -&gt; <code>Other (button)</code> -&gt; <code>Permissions</code> -&gt; <code>Commands permissions</code> </p> </li> <li> <p>\ud83d\udc72 Admin basic permissions   Basic group permissions that's applied to every group administrator  \ud83d\udd27 How to edit: <code>/settings</code> -&gt; <code>Other (button)</code> -&gt; <code>Permissions</code> -&gt; <code>Commands permissions</code> </p> </li> <li> <p>\ud83c\udf93 Roles permissions   Permission set of each role, priority ordered from lowest role Authority level to higher  \ud83d\udd27 How to edit: Bot roles promotion commands </p> </li> <li> <p>\ud83d\udc6e Admin permissions   Permissions inhered from administrator telegram settings, if an admin can do an action trough telegram, he will be able to do so also trough LibreGroupHelp   \ud83d\udd27 How to edit: <code>/admin</code>, <code>/perms</code> or telegram settings   </p> </li> <li> <p>\ud83d\udc64 User permissions   Permission applyed only to that one specific user, it takes over maximum priority on perms calculation, essential for more granular permissions control   \ud83d\udd27 How to edit: Currently not implemented  </p> </li> </ul> <p>Each permission can be either \u2705 allowing wise, \ud83d\udd18 neutral, or \u274c disallowing wise, as example, if <code>Group basic permissions</code> (lowest priority) allows the <code>/rules</code> command, but <code>User permissions</code> (highest priority) disallow it, this user won't be able to use <code>/rules</code></p> <p>Neutral state instead, allows an higher priority level to inherit from lowest, when creating custom roles we advise you to use always the neutral state if the role you are making is not limitation-focused</p> <p></p>"},{"location":"wiki/roles/","title":"Roles","text":"<p>You can set roles to every user on your group, the main use of roles is giving an user authority level on the group and give them a defined set of permissions, both relative to your group and bot</p> <p>You can see what roles are assigned to users on your group using <code>/staff</code></p>"},{"location":"wiki/roles/#admin-role","title":"Admin role","text":"<p>The most important role is the Administrator, an user can get this role with <code>/admin</code> command (advised) or directly trough your group settings, by fact it's the role directly correlated with the acutal admin from telegram side, you can change admin title using <code>/title</code></p> <p>LibreGroupHelp will bind the telegram admin permissions to match with the correlated commands and functions</p> <p>If for example by telegram settings your admin can remove users, he will automatically obtain this LibreGroupHelp commands: <code>/kick</code>, <code>/warn</code>, <code>/mute</code>, <code>/ban</code></p>"},{"location":"wiki/roles/#bot-roles","title":"Bot roles","text":"<p>LibreGroupHelp aims to provide a more granular control about permissions of your users and staffers, a granularity that trough telegram admins function can't be reached, that's why you can give the role <code>/muter</code> to allow a staffer to use just the <code>/mute</code> command, </p> <p>Currently these are the roles implemented by default from LibreGroupHelp:</p> <ul> <li> <p>\ud83d\udc51 Founder    The role avaiable only for group owner   Commands: <code>All</code> Promotion: Telegram settings (transfer ownership)    \ud83d\udd0f Bot permissions: <code>All</code> \ud83d\udcd7 Authority: 100    </p> </li> <li> <p>\u269c\ufe0f Co-Founder   The role to give full bot permissions to an user Commands: <code>All</code> Promotion: <code>/cofounder</code>, <code>/uncofounder</code> \ud83d\udd0f Bot permissions: <code>All</code> \ud83d\udcd7 Authority: 90 </p> </li> <li> <p>\ud83d\udc6e Administrator   The role given to every group admin on telegram Commands: Depends on admin permissions Promotion: <code>/admin</code>, <code>/unadmin</code> or Telegram settings \ud83d\udd0f Bot permissions: <code>immune</code>, <code>flood</code>, <code>spam</code>, <code>nsfw</code>, <code>night</code>, <code>media</code>, <code>alphabets</code>, <code>words</code>, <code>length</code> (for <code>roles</code> and <code>settings</code> depends on telegram admin permissions)   \ud83d\udcd7 Authority: 0      </p> </li> <li> <p>\ud83d\udc77\ud83c\udffb\u200d\u2642\ufe0f Moderator   A role that helps moderating your group    Commands: <code>/rules</code>, <code>/info</code>, <code>/pin</code>, <code>/geturl</code>, <code>/delete</code>, <code>/info</code>, <code>/pin</code>, <code>/kick</code>, <code>/warn</code>, <code>/unwarn</code>, <code>/mute</code>, <code>/unmute</code>, <code>/ban</code>, <code>/unban</code> Promotion: <code>/admin</code>, <code>/unadmin</code> or Telegram settings \ud83d\udd0f Bot permissions: <code>immune</code>, <code>flood</code>, <code>spam</code>, <code>nsfw</code>, <code>night</code>, <code>media</code>, <code>alphabets</code>, <code>words</code>, <code>length</code> \ud83d\udcd7 Authority: 60          </p> </li> <li> <p>\ud83d\ude4a Muter   Staffer who can mute users Commands: <code>/rules</code>, <code>/mute</code>, <code>/unmute</code> Promotion: <code>/muter</code>, <code>/unmuter</code> \ud83d\udd0f Bot permissions: none     \ud83d\udcd7 Authority: 40 </p> </li> <li> <p>\ud83d\udec3 Cleaner   Staffer who can delete messages from your group  Commands: <code>/rules</code>, <code>/delete</code> Promotion: <code>/cleaner</code>, <code>/uncleaner</code> \ud83d\udd0f Bot permissions: none   \ud83d\udcd7 Authority: 20 </p> </li> <li> <p>\u26d1 Helper   An user that contributes to the group support Commands: <code>/rules</code>, <code>/info</code>, <code>/geturl</code> Promotion: <code>/helper</code>, <code>/unhelper</code> \ud83d\udd0f Bot permissions: none   \ud83d\udcd7 Authority: 10 </p> </li> <li> <p>\ud83d\udd13 Free   An user free from any bot restriction Commands: none   Promotion: <code>/free</code>, <code>/unfree</code> \ud83d\udd0f Bot permissions: <code>immune</code>, <code>flood</code>, <code>spam</code>, <code>nsfw</code>, <code>night</code>, <code>media</code>, <code>alphabets</code>, <code>words</code>, <code>length</code> \ud83d\udcd7 Authority: 0   </p> </li> </ul>"},{"location":"wiki/roles/#custom-roles","title":"Custom roles","text":"<p>Custom roles is a functionality still not implemented but we aim to add as soon as possible, the priority depends from the acutal request from users</p> <p>Custom roles will unlock you the possibility to create your own group roles with any Role Level and any permission set you want, speeding up your administration work</p> <p></p>"}]}